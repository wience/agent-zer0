{
  "title": "my.createAnimation",
  "content": "# my.createAnimation\n\n2021-05-09 18:43\n\nCreate an animation instance. Call the instance method to describe animation, and then use the `export` method of animation instance to export the animation data and transfer to the component `animation` attribute.\n\n**Note:** After the `export` method is called, the previous animation operation will be cleared.\n\n## Sample Code\n\ncopy\n\n```json\n//.json\n{\n    \"defaultTitle\": \"Animation\"\n}\n```\n\ncopy\n\n```html\n<!-- .axml -->\n<view class=\"page\">\n  <view class=\"page-description\">Animation API</view>\n  <view class=\"page-section\">\n    <view class=\"page-section-title\">my.createAnimation</view>\n    <view class=\"page-section-demo\">\n      <view class=\"animation-element\" animation=\"{{animation}}\"></view>\n    </view>\n    <view class=\"page-section-btns\">\n      <view type=\"primary\" onTap=\"rotate\">Rotate</view>\n      <view type=\"primary\" onTap=\"scale\"> Scale</view>\n      <view type=\"primary\" onTap=\"translate\">Translate</view>\n    </view>\n    <view class=\"page-section-btns\">\n      <view type=\"primary\" onTap=\"skew\">Skew</view>\n      <view type=\"primary\" onTap=\"rotateAndScale\">Rotate and scale</view>\n      <view type=\"primary\" onTap=\"rotateThenScale\">Rotate and then scale</view>\n    </view>\n    <view class=\"page-section-btns\">\n      <view type=\"primary\" onTap=\"all\">Expand all simultaneously </view>\n      <view type=\"primary\" onTap=\"allInQueue\">Expand all in order</view>\n      <view type=\"primary\" onTap=\"reset\">Reset</view>\n    </view>\n  </view>\n</view>\n```\n\ncopy\n\n```javascript\n//.js\nPage({\n  onReady() {\n    this.animation = my.createAnimation()\n  },\n  rotate() {\n    this.animation.rotate(Math.random() * 720 - 360).step()\n    this.setData({ animation: this.animation.export() })\n  },\n  scale() {\n    this.animation.scale(Math.random() * 2).step()\n    this.setData({ animation: this.animation.export() })\n  },\n  translate() {\n    this.animation.translate(Math.random() * 100 - 50, Math.random() * 100 - 50).step()\n    this.setData({ animation: this.animation.export() })\n  },\n  skew() {\n    this.animation.skew(Math.random() * 90, Math.random() * 90).step()\n    this.setData({ animation: this.animation.export() })\n  },\n  rotateAndScale() {\n    this.animation.rotate(Math.random() * 720 - 360)\n      .scale(Math.random() * 2)\n      .step()\n    this.setData({ animation: this.animation.export() })\n  },\n  rotateThenScale() {\n    this.animation.rotate(Math.random() * 720 - 360).step()\n      .scale(Math.random() * 2).step()\n    this.setData({ animation: this.animation.export() })\n  },\n  all() {\n    this.animation.rotate(Math.random() * 720 - 360)\n      .scale(Math.random() * 2)\n      .translate(Math.random() * 100 - 50, Math.random() * 100 - 50)\n      .skew(Math.random() * 90, Math.random() * 90)\n      .step()\n    this.setData({ animation: this.animation.export() })\n  },\n  allInQueue() {\n    this.animation.rotate(Math.random() * 720 - 360).step()\n      .scale(Math.random() * 2).step()\n      .translate(Math.random() * 100 - 50, Math.random() * 100 - 50).step()\n      .skew(Math.random() * 90, Math.random() * 90).step()\n    this.setData({ animation: this.animation.export() })\n  },\n  reset() {\n    this.animation.rotate3d(0, 0, 0, 0)\n      .rotateX(0)\n      .rotateY(0)\n      .rotateZ(0)\n      .scale(1)\n      .translate(0, 0)\n      .skew(0, 0)\n      .step({ duration: 0 })\n    this.setData({ animation: this.animation.export() })\n  }\n})\n```\n\ncopy\n\n```css\n.animation-element {\n  width: 200rpx;\n  height: 200rpx;\n  background-color: #108ee9;\n  transform: scaleX(1) scaleY(1);\n}\n```\n\n## Parameters\n\nObject type with the following attributes:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Property** | **Type** | **Required** | **Description** |\n| duration | Integer | No | Animation duration, in ms, 400 by default. |\n| timeFunction | String | No | Define animation effect, linear by default, effective values including linear, ease, ease-in, ease-in-out, ease-out, step-start and step-end . |\n| delay | Integer | No | Animation delay, in ms, 0 by default. |\n| transformOrigin | String | No | Set transform-origin, 50% 50% 0 by default. |\n\n## Sample Code\n\ncopy\n\n```javascript\n//.js\nconst animation = my.createAnimation({\n  transformOrigin: \"top right\",\n  duration: 3000,\n  timeFunction: \"ease-in-out\",\n  delay: 100,\n})\n```\n\n## Animation\n\nThe animation instance may call the following method to describe the animation. At the end of the call, the instance itself is returned. The chain call style is supported. When the view animation attribute is initialized as `{}`, error may appears on basic library 1.11.0 (not including 1.11.0) and lower version. It is recommended to initialize as `null`.\n\n### Style\n\n|     |     |     |\n| --- | --- | --- |\n| **Method** | **Parameters** | **Description** |\n| opacity | value | Transparency, range 0~1. |\n| backgroundColor | color | Color value. |\n| width | length | Set the width:length values, in px, such as 300 px. |\n| height | length | Set the height:length values, in px, such as 300 px. |\n| top | length | Set the top:length values, in px, such as 300 px. |\n| left | length | Set the left:length values, in px, such as 300 px. |\n| bottom | length | Set the bottom:length values, in px, such as 300 px. |\n| right | length | Set the right:length values, in px, such as 300 px. |\n\n### Rotation\n\n|     |     |     |\n| --- | --- | --- |\n| **Method** | **Parameters** | **Description** |\n| rotate | deg | Deg range -180 ~ 180, rotate by deg degrees clockwise from origin. |\n| rotateX | deg | Deg range -180 ~ 180, rotate by deg degrees on X axis. |\n| rotateY | deg | Deg range -180 ~ 180, rotate by deg degrees on Y axis. |\n| rotateZ | deg | Deg range -180 ~ 180, rotate by deg degrees on Z axis. |\n| rotate3d | (x, y , z, deg) | Same as [transform-function rotate3d](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d). |\n\n### Scale\n\n|     |     |     |\n| --- | --- | --- |\n| **Method** | **Parameters** | **Description** |\n| scale | sx,\\[sy\\] | When there is only one parameter, it indicates scaling sx times on X and Y axises at the same time. <br>When there are two parameters, it indicates scaling sx times on X axis and sy times on Y axis. |\n| scaleX | sx | Scale sx times on X axis. |\n| scaleY | sy | Scale sy times on Y axis. |\n| scaleZ | sz | Scale sz times on Z axis. |\n| scale3d | (sx,sy,sz) | Scale sx times on X axis, sy times on Y axis and sz times on Z axis. |\n\n### Translate\n\n|     |     |     |\n| --- | --- | --- |\n| **Method** | **Parameters** | **Description** |\n| translate | tx,\\[ty\\] | When there is only one parameter, it indicates translating by tx on X axis. When there are two parameters, it indicates translating by tx on X axis and ty on Y axis. |\n| translateX | tx | Translate by tx on X axis, in px. |\n| translateY | ty | Translate by ty on Y axis, in px. |\n| translateZ | tz | Translate by tz on Z axis, in px. |\n| translate3d | (tx,ty,tz) | Translate by tx on X axis, ty on Y axis and tz on Z axis, in px. |\n\n### Skew\n\n|     |     |     |\n| --- | --- | --- |\n| **Method** | **Parameters** | **Description** |\n| skew | ax,\\[ay\\] | Range -180~180 When there is only one parameter, Y stays unchanged and X skews by ax degrees clockwise. When there are two parameters, X skews by ax degrees and Y skews by ay degrees. |\n| skewX | ax | Range -180~180 Y stays unchanged and X skews by ax degrees clockwise. Degree. |\n| skewY | ay | Range -180~180 X stays unchanged and Y skews by ay degrees clockwise. |\n\n### Matrix transformation\n\n|     |     |     |\n| --- | --- | --- |\n| **Method** | **Parameters** | **Description** |\n| matrix | (a,b,c,d,tx,ty) | Same as [transform-function](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix). |\n| matrix3d | (a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4) | Same as [transform-function matrix3d](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d). |\n\n## Animation Queue\n\n• When the animation operation method is called, it is required to call `step()` to indicates the completion of a group of animations. Within a group of animation, it is possible to call any number of animation methods. All animations in the group start at the same time. It does not enter into the next group until the current animation group ends.\n\n• The `step()` can transfer a configuration parameter that is the same as `my.createAnimation()`, which is used to specify the configuration of the current animation group.",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/api_ui_animation_createanimation",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_api_ui_animation_createanimation.json"
}