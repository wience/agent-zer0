{
  "title": "Call an API via adding a signature",
  "content": "# Call an API via adding a signature\n\n2021-05-09 18:43\n\nBefore calling an API, signing a request is needed. After sending the request and obtaining the response, need to validate the response signature accordingly.\n\n# Sign a request\n\n## Procedure\n\n1. Obtain your private key, represented by `privateKey`, which is used to sign a request.\n2. Construct the content to be signed ( `Content_To_Be_Signed`).\n3. Calculate and generate the signature.\n4. Add the generated signature to the request header.\n\nFor details of each step, see the following examples.\n\n## Example\n\n### 1\\. Obtain your private key to sign the request\n\nGet your private key ready, which is used to generate the signature later.\n\n### 2\\. Construct the content to be signed\n\nFor example, a request has the following properties:\n\n- `HTTP_URI` : for example, /api/v2/payments/pay\n- `Client-Id` : TEST\\_5X00000000000000\n- `Request-Time` : 2019-05-28T12:12:12+08:00\n- `HTTP_BODY` : the body looks like the following format.\n\ncopy\n\n```json\n{\n \"order\":{\n    \"orderId\":\"OrderID_0101010101\",\n    \"orderDescription\":\"sample_order\",\n    \"orderAmount\":{\n       \"value\":\"100\",\n       \"currency\":\"JPY\"\n    }，\n },\n \"paymentAmount\":{\n    \"value\":\"100\",\n    \"currency\":\"JPY\"\n },\n \"paymentFactor\": {\n     \"isInStorePayment\": \"true\"\n }\n}\n```\n\nBy complying with the [Syntax of Content\\_To\\_Be\\_Signed](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api#dc6tR), the content to be signed ( `Content_To_Be_Signed`) is created as follows:\n\ncopy\n\n```\nPOST /api/v2/payments/pay\nTEST_5X00000000000000.2019-05-28T12:12:12+08:00.{\n\"order\":{\n    \"orderId\":\"OrderID_0101010101\",\n    \"orderDescription\":\"sample_order\",\n    \"orderAmount\":{\n       \"value\":\"100\",\n       \"currency\":\"JPY\"\n    }，\n },\n \"paymentAmount\":{\n    \"value\":\"100\",\n    \"currency\":\"JPY\"\n },\n \"paymentFactor\": {\n     \"isInStorePayment\": \"true\"\n }\n}\n```\n\n### 3\\. Calculate and generate the signature\n\nUse the `sha256withrsa` method that involve the proper algorithm and private keyto calculate and generate the signature.\n\ncopy\n\n```\ngeneratedSignature=base64UrlEncode(sha256withrsa(<Content_To_Be_Signed>), <privateKey>))\n```\n\n- `Content_To_Be_Signed:` the content to be signed that is obtained in step 2.\n- `privateKey` : the private key value that is obtained in step 1.\n- `sha256withrsa` : the algorithm to use, RSA256.\n\nFor example, the generated signature `generatedSignature` looks as follows:\n\ncopy\n\n```\nKrwDE9tAPJYBb4cUZU6ALJxGIZgwDXn5UkFPMip09n%2FkYKPhEIII%2Fki2rYY2lPtuKVgMNz%2BtuCU%\n2FjzRpohDbrOd8zYriiukpGAxBQDIVbatGI7WYOcc9YVQwdCR6ROuRQvr%2FD1AfdhHd6waAASu5Xugow9\nw1OW7Ti93LTd0tcyEWQYd2S7c3A73sHOJNYl8DC1PjasiBozZ%2FADgb7ONsqHo%2B8fKHsLygX9cuMkQY\nTGIRBQsvfgICnJhh%2BzXV8AQoecJBTrv6p%xxxx\n```\n\n### 4\\. Add the generated signature to the request header\n\na. Assemble a signature string as the following syntax.\n\ncopy\n\n```\n'Signature: algorithm=<algorithm>, keyVersion=<key-version>, signature=<generatedSignature>'\n```\n\n- `algorithm` , `keyVersion` : see the header of the [Message structure](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/xxpbkg#3mLq0) chapter.\n- `generatedSignature` : the signature that is generated in step 3.\n\nFor example:\n\ncopy\n\n```\n'Signature: algorithm=RSA256, keyVersion=0, signature=KrwDE9tAPJYBb4cUZU6ALJxGIZgwDXn5UkFPMip09n%2FkYKPhEIII%2Fki2rYY2lPtuKVgMNz%2BtuCU%2FjzRpohDbrOd8zYriiukpGAxBQDIVbatGI7WYOcc9YVQwdCR6ROuRQvr%2FD1AfdhHd6waAASu5Xugow9w1OW7Ti93LTd0tcyEWQYd2S7c3A73sHOJNYl8DC1PjasiBozZ%2FADgb7ONsqHo%2B8fKHsLygX9cuMkQYTGIRBQsvfgICnJhh%2BzXV8AQoecJBTrv6p%xxxx'\n```\n\nb. Add the signature string to the request header.\n\nFor example：\n\ncopy\n\n```\n-H 'Signature: algorithm=RSA256, keyVersion=0, signature=KrwDE9tAPJYBb4cUZU6ALJxGIZgwDXn5UkFPMip09n%2FkYKPhEIII%2Fki2rYY2lPtuKVgMNz%2BtuCU%2FjzRpohDbrOd8zYriiukpGAxBQDIVbatGI7WYOcc9YVQwdCR6ROuRQvr%2FD1AfdhHd6waAASu5Xugow9w1OW7Ti93LTd0tcyEWQYd2S7c3A73sHOJNYl8DC1PjasiBozZ%2FADgb7ONsqHo%2B8fKHsLygX9cuMkQYTGIRBQsvfgICnJhh%2BzXV8AQoecJBTrv6p%xxxx'\n```\n\n## Syntax of `Content_To_Be_Signed`\n\ncopy\n\n```\n<HTTP_METHOD> <HTTP_URI>\n<Client-Id>.<Request-Time>.<HTTP_BODY>\n```\n\n- `HTTP_METHOD` : POST\n- `HTTP_URI` : For example, if the HTTP URL is [https://example.com/api/v2/payments/pay,](https://example.com/api/v2/payments/pay,) this property is `/api/v2/payments/pay`.\n- `Client-Id` : is used to identify a client, and is associated with the keys that are used for signature and encryption. You can get this field from the request header.\n- `Request-Time`: Specifies the time when a request is sent, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Note: This field must be accurate to milliseconds. For example, `2019-05-28T12:12:12+08:00` . You can get this field from the request header.\n- `HTTP_BODY` : the data body of a request.\n\n# Send a request\n\nConstruct a request by adding the `Client-Id`, `Request-Time`, and `Signature` fields to the request header. After a request is constructed, you can use common tools, like cURL or Postman to send the request. In the following example, cURL is used.\n\ncopy\n\n```\ncurl -X POST \\\n  https://example.com/api/v2/payments/pay \\\n  -H 'Content-Type: application/json' \\\n  -H 'Client-Id: TEST_5X00000000000000' \\\n  -H 'Request-Time: 2019-05-28T12:12:12+08:00' \\\n  -H 'Signature: algorithm=RSA256, keyVersion=0, signature=KrwDE9tAPJYBb4cUZU6ALJxGIZgwDXn5UkFPMip09n%2FkYKPhEIII%2Fki2rYY2lPtuKVgMNz%2BtuCU%2FjzRpohDbrOd8zYriiukpGAxBQDIVbatGI7WYOcc9YVQwdCR6ROuRQvr%2FD1AfdhHd6waAASu5Xugow9w1OW7Ti93LTd0tcyEWQYd2S7c3A73sHOJNYl8DC1PjasiBozZ%2FADgb7ONsqHo%2B8fKHsLygX9cuMkQYTGIRBQsvfgICnJhh%2BzXV8AQoecJBTrv6p%xxxx' \\\n  -d '{\n      \"order\":{\n          \"orderId\":\"OrderID_0101010101\",\n          \"orderDescription\":\"sample_order\",\n          \"orderAmount\":{\n             \"value\":\"100\",\n             \"currency\":\"JPY\"\n          }\n       },\n       \"paymentAmount\":{\n          \"value\":\"100\",\n          \"currency\":\"JPY\"\n       },\n       \"paymentFactor\": {\n           \"isInStorePayment\": \"true\"\n       }\n}'\n```\n\n# Handle a response\n\nAfter you receive a response, you need to validate the signature of the response. A response consists of response headers and response body. For example:\n\n- The response header sample\n\ncopy\n\n```\nClient-Id: 5X00000000000000\nResponse-Time: 2019-05-28T12:12:14+08:00\nSignature: algorithm=RSA256, keyVersion=0, signature=p9T2hXxIjek0UOLw3fwlthNsV6ATaioIvu8X1uFx8a9tE87d2XEhqylnf0KjifJ3WhCoMokl\nGwwlDS3tsSenwnL0Ha6BsXbJvUHRC5qcVlNy5Oq%2FpNqx2%2BKdwbw4eY7tZBDQhMKoaMVSbqbCb3eRBxxxx\nTrace-Id: 0ba604b41558615600801371953814.0\n```\n\n- The response body sample\n\ncopy\n\n```json\n{\n\"result\": {\n\t\"resultCode\":\"SUCCESS\",\n\t\"resultStatus\":\"S\",\n\t\"resultMessage\":\"success\"\n},\n\"paymentTime\": \"2019-05-28T12:12:13+08:00\",\n\"paymentId\":\"1234567\"\n}\n```\n\n## Validate a signature\n\n1. Obtain the platform public key.\n2. Construct the content to be validated ( `Content_To_Be_Validated` ).\n3. Get the signature from the response header.\n4. Validate the signature.\n\nFor details of each step, see the following examples.\n\n## Example\n\n### 1\\. Obtain the platform public key\n\nThe `Client-Id` and `KeyVersion` properties can be obtained from the response header. Merchants send these properties to the wallet, based on which, the wallet returns the public key to the merchant.\n\n### 2\\. Construct the content to be validated\n\nGiven the [response body sample](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api#9Elhj) above, by complying with the [Syntax of Content\\_To\\_Be\\_Validated](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api#NDDwc), construct the content to be validated (`Content_To_Be_Validated`) as follows:\n\ncopy\n\n```\nPOST /api/v2/payments/pay\nTEST_5X00000000000000.2019-05-28T12:12:14+08:00.{\n \"result\": {\n    \"resultCode\":\"SUCCESS\",\n    \"resultStatus\":\"S\",\n    \"resultMessage\":\"success\"\n },\n \"paymentTime\": \"2019-05-28T12:12:13+08:00\",\n \"paymentId\":\"1234567\"\n}\n\n```\n\n### 3\\. Get the signature from the response header\n\nThe target signature string ( `target_signature` ) is extracted from `Signature` header of the response. For details about the response header, see the [Message structure](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/xxpbkg#YdmVS) chapter.\n\ncopy\n\n```\nSignature: algorithm=RSA256, keyVersion=0, signature=<target_signature>\n```\n\n### 4\\. Validate the signature\n\nUse the `sha256withrsa_verify`method to validate the signature of a response.\n\nSyntax of the `sha256withrsa_verify` method:\n\ncopy\n\n```\nsha256withrsa_verify(base64UrlDecode(<target_signature>), <Content_To_Be_Validated>, <serverPublicKey>)\n```\n\n- `target_signature` : the signature extracted from the response header, which is obtained from step 3.\n- `Content_To_Be_Validated`: the content to be validated that is created from step 2.\n- `serverPublicKey` : the platform public key that is obtained from step 1.\n\n## Syntax of `Content_To_Be_Validated`\n\ncopy\n\n```\n<HTTP_METHOD> <HTTP_URI>\n<Client-Id>.<Response-Time>.<HTTP_BODY>\n```\n\n- `Client-Id` : identifies a client. You can get this field from the response header. For example `TEST_5X00000000000000`\n- `Response-Time`: Indicates the time when a response is returned, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Note: This field must be accurate to milliseconds. You can get this field from the response header.\n- `HTTP_BODY` : Indicates the data body of the response.",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_call_api.json"
}