{
  "title": "Data Binding",
  "content": "# Data Binding\n\n2021-05-09 18:43\n\nThe dynamic data in AXML is bound with the `data` content in `Page`.\n\n## Simple Binding\n\nThe Mustache syntax is used to package variable with two pairs of braces ( `{{}}`). It can be used in various syntax scenarios.\n\n### Contents\n\ncopy\n\n```html\n<view> {{ message }} </view>\n```\n\ncopy\n\n```javascript\nPage({\n  data: {\n\tmessage: 'Hello!',\n  },\n});\n```\n\n### Component Attribute\n\nComponent attributes need to be packaged with double quotation marks (\"\").\n\ncopy\n\n```html\n<view id=\"item-{{id}}\"> </view>\n```\n\ncopy\n\n```javascript\nPage({\n  data: {\n\tid: 0,\n  },\n});\n```\n\n### Control Attribute\n\nControl attributes need to be packaged with double quotation marks (\"\").\n\ncopy\n\n```html\n<view a:if=\"{{condition}}\"> </view>\n```\n\ncopy\n\n```javascript\nPage({\n  data: {\n\tcondition: true,\n  },\n});\n```\n\n### Keywords\n\nThe keywords need to be packaged with double quotation marks (\"\").\n\n- True: boolean true\n\n- False: Â boolean false\n\ncopy\n\n```html\n<checkbox checked=\"{{false}}\"> </checkbox>\n```\n\nNote: Do not code directly `checked=\"false\"`. The operation result is a string, and becomes the true value when converted into boolean type.\n\n## Operation\n\nSimple operation can be packaged with two pairs of braces ( `{{}}`). The following operations are supported:\n\n### Ternary Operation\n\ncopy\n\n```html\n<view hidden=\"{{flag ? true : false}}\"> Hidden </view>\n```\n\n### Arithmetic Operation\n\ncopy\n\n```html\n<view> {{a + b}} + {{c}} + d </view>\nPage({\n  data: {\n\ta: 1,\n\tb: 2,\n\tc: 3,\n  },\n});\n```\n\nPage output content is `3 + 3 + d`\n\n### Logic Judgment\n\ncopy\n\n```html\n<view a:if=\"{{length > 5}}\"> </view>\n```\n\n### String Operation\n\ncopy\n\n```html\n<view>{{\"hello\" + name}}</view>\n```\n\ncopy\n\n```javascript\nPage({\n  data:{\n\tname: 'Mini Program',\n  },\n});\n```\n\n### Data Path Operation\n\ncopy\n\n```html\n<view>{{object.key}} {{array[0]}}</view>\n```\n\ncopy\n\n```javascript\nPage({\n  data: {\n\tobject: {\n \t key: 'Hello ',\n},\n \tarray: ['Mini Program'],\n  },\n});\n```\n\n## Combine\n\nThe combination can be done directly in the Mustache syntax to make up a new object or array.\n\n### Array\n\ncopy\n\n```html\n<view a:for=\"{{[zero, 1, 2, 3, 4]}}\"> {{item}} </view>\nPage({\n  data: {\n    zero: 0,\n  },\n});\n```\n\nFinally combined into array `[0, 1, 2, 3, 4]`\n\n### Object\n\ncopy\n\n```html\n<template is=\"objectCombine\" data=\"{{foo: a, bar: b}}\"></template>\nPage({\n  data: {\n    a: 1,\n    b: 2,\n  },\n});\n```\n\nFinally combined into object `{foo: 1, bar: 2}`.\n\nDestructuring operator `...` can be used to expand an object:\n\ncopy\n\n```html\n<template is=\"objectCombine\" data=\"{{...obj1, ...obj2, e: 5}}\"></template>\n```\n\ncopy\n\n```html\nPage({\n  data: {\n    obj1: {\n      a: 1,\n      b: 2,\n    },\n    obj2: {\n      c: 3,\n      d: 4,\n    },\n  },\n});\n```\n\nFinally combined into object `{a: 1, b: 2, c: 3, d: 4, e: 5}`.\n\nIf the object key and value are the same, the indirect expression is as below:\n\ncopy\n\n```html\n<template is=\"objectCombine\" data=\"{{foo, bar}}\"></template>\nPage({\n  data: {\n    foo: 'my-foo',\n    bar: 'my-bar',\n  },\n});\n```\n\nFinally combined into object `{foo: 'my-foo', bar:'my-bar'}`\n\n**Note:** The above methods can be combined randomly. When the variable names are the same, however, the latter overrides the former. For example:\n\ncopy\n\n```html\nPage({\n\tdata: {\n\t\tobj1: {\n      a: 1,\n      b: 2,\n    },\n    obj2: {\n      b: 3,\n      c: 4,\n    },\n  a: 5,\n  },\n});\n```\n\nFinally combined into object `{a: 5, b: 3, c: 6}`.\n\n## FAQ\n\n**Q: How to clear the data when jumping to a new page?**\n\nA: The data can not be cleared, you can override the data when jumping.",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_axml-reference_data-binding",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_framework_axml-reference_data-binding.json"
}