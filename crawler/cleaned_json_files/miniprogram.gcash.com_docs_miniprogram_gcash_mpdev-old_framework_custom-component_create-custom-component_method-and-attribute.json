{
  "title": "Method and Attribute",
  "content": "# Method and Attribute\n\n2021-05-09 18:43\n\n## Component Methods\n\nThe custom component can not only render static data but also respond to user click event, so as to handle and trigger custom component re-render. In the methods, it is possible to define any customized method.\n\n**Note**:\n\nDifferent from Page, the custom component needs to define the event handler in the methods.\n\n**Modify component axml:**\n\ncopy\n\n```\n// /components/counter/index.axml\n<view>{{counter}}</view>\n<button onTap=\"plusOne\">+1</button>\n```\n\n**Handle event in component js:**\n\ncopy\n\n```\n// /components/counter/index.js\nComponent({\n  data: { counter: 0 },\n  methods: {\n    plusOne(e) {\n      console.log(e);\n      this.setData({ counter: this.data.counter + 1 });\n    },\n  },\n});\n```\n\nNow the page renders an additional button. Each click on it will increase the page number by 1.\n\n## Props\n\nCustom component is not isolated from the outside. By now, the example is a standalone module. To make it interact with the outside, the custom component can accept external input. After processing is done, it can notify the outside with “Done”. All those can be implemented with props.\n\n**Example:**\n\nNote:\n\n- The props is the attribute transferred from outside. It is possible to specify default attribute, and cannot modify in the internal codes of the custom component.\n\n- In the custom component axml, it is possible to refer to the props attribute directly.\n\n- For the event in the custom component axml, only the method in the “methods” of the js of the custom component can respond. If it is required to call the function transferred from the parent component, it is possible to call it via this.props in the methods.\n\ncopy\n\n```javascript\n// /components/counter/index.js\nComponent({\n  data: { counter: 0 },\n  props: {\n    onCounterPlusOne: (data) => console.log(data),\n    extra: 'default extra',\n  },\n  methods: {\n    plusOne(e) {\n      console.log(e);\n      const counter = this.data.counter + 1;\n      this.setData({ counter });\n      this.props.onCounterPlusOne(counter); // Response to the event in axml can be through the method in \"methods\" only\n    },\n  },\n});\n```\n\nThe above codes set default attributes for props, and then the event handler get those attributes via **this.props**.\n\ncopy\n\n```html\n// /components/counter/index.axml\n<view>{{counter}}</view>\n<view>extra: {{extra}}</view>\n<button onTap=\"plusOne\">+1</button>\n```\n\n**External use: do not transfer props**\n\ncopy\n\n```html\n// /pages/index/index.axml\n<my-component />\n```\n\n**Page output:**\n\ncopy\n\n```\n0\nextra: default extra\n+1\n```\n\nNow no parameter is transferred, so the page shows the default configured for props in the component js.\n\n**External use: transfer props**\n\n**Note**:\n\nWhen custom component is used externally, if the transfer parameter is a function, the “on” suffix is necessary; otherwise it will be processed as a string.\n\ncopy\n\n```javascript\n// /pages/index/index.js\nPage({\n  onCounterPlusOne(data) {\n    console.log(data);\n  }\n});\n```\n\ncopy\n\n```html\n// /pages/index/index.axml\n<my-component extra=\"external extra\" onCounterPlusOne=\"onCounterPlusOne\" />\n```\n\n**Page output:**\n\ncopy\n\n```\n0\nextra: external extra\n+1\n```\n\nHere parameter is transferred, so the page shows the extra value transferred externally “external extra”.",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_custom-component_create-custom-component_method-and-attribute",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_framework_custom-component_create-custom-component_method-and-attribute.json"
}