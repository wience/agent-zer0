{
  "title": "Template and Style",
  "content": "# Template and Style\n\n2021-05-09 18:43\n\nSimilar to page, custom component has its own axml template and acss style.\n\n## axml\n\nThe axml is the mandate part of custom component.\n\n**Note**:\n\nDifferent from page, user’s customized event shall be placed in methods.\n\nExample:\n\ncopy\n\n```html\n<!-- /components/xx/index.axml -->\n<view onTap=\"onMyClick\" id=\"c-{{$id}}\"/>\n```\n\ncopy\n\n```javascript\nComponent({\n  methods: {\n  \tonMyClick(e) {\n\t  console.log(this.is, this.$id);\n\t},\n  },\n});\n```\n\n### slot\n\nBy supporting props in component js, the custom component can interact with external caller, accepting the data transferred from the external caller, calling the function transferred from the external caller, and notifying the internal change of the component to the external caller.\n\nHowever, this is not enough, because the custom component is not flexible enough. In addition to data processing and notification, the Mini Program provides slot, so that the custom component axml structure can be assembled by using the axml transferred from the external caller. The external caller can transfer axml to custom component, which the custom component uses to assemble the final component axml structure.\n\n#### Default slot\n\n**Sample code:**\n\ncopy\n\n```html\n<!-- /components/xx/index.axml -->\n<view>\n  <slot>\n    <view>default slot & default value</view>\n  </slot>\n  <view>other</view>\n</view>\n```\n\n**Caller does not transfer axml**\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<xx />\n```\n\n**Page output:**\n\ncopy\n\n```\ndefault slot & default value\nother\n```\n\n**Caller transfers axml**\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<xx>\n  <view>xx</view>\n  <view>yy</view>\n</xx>\n```\n\n**Page output:**\n\ncopy\n\n```\nxx\nyy\nother\n```\n\nThe “slot” can be interpreted as the slot. The “default slot” is the default slot. If the caller does not transfer axml in the component tag , the default slot is rendered. If the caller transfers axml in the component tag , it is used to replace the default slot and assemble the final axml for render.\n\n#### Named slot\n\nThe default slot can transfer one set of axml. For complicated component, it is required to render different axml at different locations, that is, to transfer multiple axml. Here it needs named slot .\n\n**Sample code:**\n\ncopy\n\n```html\n<!-- /components/xx/index.axml -->\n<view>\n  <slot>\n    <view>default slot & default value</view>\n  </slot>\n  <slot name=\"header\"/>\n  <view>body</view>\n  <slot name=\"footer\"/>\n</view>\n```\n\n**Transfer only named slot**\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<xx>\n  <view slot=\"header\">header</view>\n  <view slot=\"footer\">footer</view>\n</xx>\n```\n\n**Page output**\n\ncopy\n\n```\ndefault slot & default value\nheader\nbody\nfooter\n```\n\n**Transfer named slot and default slot**\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<xx>\n  <view>this is to default slot</view>\n  <view slot=\"header\">header</view>\n  <view slot=\"footer\">footer</view>\n</xx>\n```\n\n**Page output**\n\ncopy\n\n```\nthis is to default slot\nheader\nbody\nfooter\n```\n\nThe named slot is the slot with a name. In the sub-tag of the custom component tag, the external caller can specify which part of axml to place in which named slot of the custom component. The part without named slot specified in the sub-tag of the custom component tag is placed into the default slot. If it transfers only the named slot, the default slot will not be overwritten.\n\n#### slot-scope\n\nThrough the named slot, the custom component axml uses either the custom component axml, or the external caller (such as page) axml.\n\nBy using the custom component axml, it is possible to access the data within the component. Through the props attribute, meanwhile, it is possible to access the data of external caller.\n\n**Example:**\n\ncopy\n\n```javascript\n// /components/xx/index.js\nComponent({\n  data: {\n    x: 1,\n  },\n  props: {\n    y: '',\n  },\n});\n```\n\ncopy\n\n```html\n<!-- /components/xx/index.axml -->\n<view>component data: {{x}}</view>\n<view>page data: {{y}}</view>\n```\n\ncopy\n\n```javascript\n// /pages/index/index.js\nPage({\n  data: { y: 2 },\n});\n```\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<xx y=\"{{y}}\" />\n```\n\n**Page output:**\n\ncopy\n\n```\ncomponent data: 1\npage data: 2\n```\n\nWhen the custom component uses external caller (such as page) axml through slot, it can access the data of external caller only.\n\n**Sample code:**\n\ncopy\n\n```html\n<!-- /components/xx/index.axml -->\n<view>\n  <slot>\n    <view>default slot & default value</view>\n  </slot>\n  <view>body</view>\n</view>\n```\n\ncopy\n\n```javascript\n// /pages/index/index.js\nPage({\n  data: { y: 2 },\n});\n```\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<xx>\n  <view>page data: {{y}}</view>\n</xx>\n```\n\n**Page output:**\n\ncopy\n\n```\npage data: 2\n```\n\nThe slot scope allows the slot content can access the data within the component.\n\n**Sample code:**\n\ncopy\n\n```javascript\n// /components/xx/index.js\nComponent({\n  data: {\n    x: 1,\n  },\n});\n```\n\ncopy\n\n```html\n<!-- /components/xx/index.axml -->\n<view>\n  <slot x=\"{{x}}\">\n    <view>default slot & default value</view>\n  </slot>\n  <view>body</view>\n</view>\n```\n\ncopy\n\n```javascript\n// /pages/index/index.js\nPage({\n  data: { y: 2 },\n});\n```\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<xx>\n  <view slot-scope=\"props\">\n    <view>component data: {{props.x}}</view>\n    <view>page data: {{y}}</view>\n  </view>\n</xx>\n```\n\n**Page output:**\n\ncopy\n\n```\ncomponent data: 1\npage data: 2\nbody\n```\n\nAs shown above, the custom component exposes the internal component data by defining the slot attribute. When the page uses the component, the action scope slot is declared via slot-scope. The attribute value defines the temporary variable name props, thus accessible to the internal data of the component.\n\n## acss\n\nJust like the page, the custom component can have its defined own acss style. The acss is automatically introduced into the page that uses the component without manual introduction of the page.",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_custom-component_create-custom-component_template-and-style",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_framework_custom-component_create-custom-component_template-and-style.json"
}