{
  "title": "Event Object",
  "content": "# Event Object\n\n2021-05-09 18:43\n\nWhen the component triggers the event, the event handler bounded with the logic layer receives an event object.\n\n## BaseEvent\n\nBaseEvent basic event object attribute list:\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| type | String | Event type. |\n| timeStamp | Integer | Event generated timestamp. |\n| target | Object | Attribute value set of the component triggering the event. |\n\n### Type\n\nType: Event type\n\n### Timestamp\n\ntimeStamp: Event generated timestamp\n\n### Target\n\n`dataset` define data in component, and the data is transferred via event to the logic layer. Start with `data-` and use hyphen `-` to connect multiple words which must be in lower case (upper case automatically converted into lower case). For example, the `data-element-type` will eventually convert the hyphen into hump elementType in the `event.target.dataset`.\n\nSample codes:\n\ncopy\n\n```\n<view data-alpha-beta=\"1\" data-alphaBeta=\"2\" onTap=\"bindViewTap\"> DataSet Test </view>\n```\n\ncopy\n\n```\nPage({\n bindViewTap:function(event){\n   event.target.dataset.alphaBeta === 1 // - Will convert into hump writing\n   event.target.dataset.alphabeta === 2 // Upper case converted into lower case\n }\n})\n```\n\nTarget: source component object that triggers the event, attribute list:\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| id | String | Event source component id. |\n| tagName | String | Current component type. |\n| dataset | Object | Set of custom attributes starting with **data-** on component bound with the event. |\n| targetDataset | Object | Set of custom attributes starting with **data-** on component actually triggering the event. |\n\n## CustomEvent\n\nCustomEvent custom event object attribute list (inherited from BaseEvent)\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| detail | Object | Additional information. |\n\n### Detail\n\nData carried in custom event The form component event carries user entry information. For example, the switch component, when onChange trigger, gets user selected status value via event.detail.value. The media error event carries error information. **For details, see the component document event description**.\n\n## TouchEvent\n\nTouchEvent touch event object attribute list (inherited from BaseEvent)\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| touches | Array | Array of touch point information staying current on the screen. |\n| changedTouches | Array | Array of touch point information changing currently. |\n\nThe touches is an array. Each of its elements is a Touch object (the touches carried in the **canvas** touch event is the CanvasTouch array), indicating the touch point staying on the screen.\n\nchangedTouches data format is the same as Â touches. Indicates changing touch point, such as from none to start (touchstart), location change (touchmove), from touch to end (touchend, touchcancel).\n\n### Touch Object\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| identifier | Number | Touch point identifier. |\n| pageX, pageY | Number | Distance to the document upper-left corner, the upper-left corner as origin, horizontal direction as x axis and vertical direction as y axis. |\n| clientX, clientY | Number | Distance to the displayable region of page (screen except for navigation bar), the upper-left corner as origin, horizontal direction as x axis and vertical direction as y axis. |\n\n### CanvasTouch Object\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| identifier | Number | Touch point identifier. |\n| x, y | Number | Distance to the Canvas upper-left corner, the Canvas upper-left corner as origin, horizontal direction as x axis and vertical direction as y axis. |\n\n### Sample\n\nTake `touchMove` event as an example, when user touch the following component.\n\ncopy\n\n```html\n<view class=\"move-view\" onTouchMove=\"touchMoveHandle\">\n</view>\n```\n\nThe `touchMoveHandle` will be invoked in the page, the TouchEvent will act as the parameter.\n\ncopy\n\n```javascript\nPage({\n  touchMoveHandle(e){\n    console.log(e)\n  }\n});\n```\n\nThe console output\n\ncopy\n\n```json\n{\n  \"type\": \"touchMove\",\n  \"timeStamp\": 1562241425847,\n  \"target\": {\n    \"targetDataset\": {},\n    \"tagName\": \"view\",\n    \"dataset\": {},\n    \"offsetLeft\": 0,\n    \"offsetTop\": 0\n  },\n  \"currentTarget\": {\n    \"tagName\": \"view\",\n    \"dataset\": {},\n    \"offsetLeft\": 0,\n    \"offsetTop\": 0\n  },\n  \"touches\": [\\\n    {\\\n      \"clientX\": 49.69140625,\\\n      \"clientY\": 54.1640625,\\\n      \"identifier\": 0,\\\n      \"pageX\": 49.69140625,\\\n      \"pageY\": 54.1640625\\\n    }\\\n  ],\n  \"changedTouches\": [\\\n    {\\\n      \"clientX\": 49.69140625,\\\n      \"clientY\": 54.1640625,\\\n      \"identifier\": 0,\\\n      \"pageX\": 49.69140625,\\\n      \"pageY\": 54.1640625\\\n    }\\\n  ]\n}\n```",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_event-system_event-object",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_framework_event-system_event-object.json"
}