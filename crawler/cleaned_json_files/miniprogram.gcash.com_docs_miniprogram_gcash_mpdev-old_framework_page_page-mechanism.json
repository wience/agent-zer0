{
  "title": "Page Mechanism",
  "content": "# Page Mechanism\n\n2022-06-30 23:35\n\n## Page(object: Object)\n\nEach .js file in the `/pages` directory has a  `Page` object to define properties for a Mini Program page. We can use this object to specify the initial data, register lifecycle callbacks, and customize event handlers.\n\nBelow are the basic page codes:\n\ncopy\n\n```javascript\n// pages/index/index.js\nPage({\n  data: {\n    title: \"Mini Program\",\n  },\n  onLoad(query) {\n    // Page loading\n  },\n  onShow() {\n    // Page showing\n  },\n  onReady() {\n    // Page loading complete\n  },\n  onHide() {\n    // Page hiding\n  },\n  onUnload() {\n    // Page closed\n  },\n  onTitleClick() {\n    // Title clicked\n  },\n  onPullDownRefresh() {\n    // Page pulled down\n  },\n  onReachBottom() {\n    // Page pulled down till bottom\n  },\n  onShareAppMessage() {\n   // Return customized sharing information\n  },\n  // Event handler object\n  events: {\n    onBack() {\n      console.log('onBack');\n    },\n  },\n  // Custom event handler\n  viewTap() {\n    this.setData({\n      text: 'Set data for update.',\n    });\n  },\n  // Custom event handler\n  go() {\n    // Jump with parameters, read type from query of onLoad function in page/ui/index\n    my.navigateTo({url:'/page/ui/index?type=mini'});\n  },\n  // Custom data object\n  customData: {\n    name: 'Mini Program',\n  },\n});\n```\n\n## Page Lifecycle\n\nThe diagram below shows the lifecyle of the  `Page` object.\n\nThe Mini Program basically uses the view thread (Webview) and application service thread (Worker) for control and management. The Webview and Worker threads run in parallel.\n\n- Upon startup, the Worker thread invokes `app.onLauch` and `app.onShow` when the app is created. Subsequently when WebView initialization completes, the Worker thread receives a notification from WebView thread and then invokes `page.onLoad` and `page.onShow` to indicate the completion of page creation.\n\n- Upon the notification on completion of the Webview initialization, the Worker sends the initialized data to the Webview for render. Now the Webview completes the first data render.\n\n- After the first render is completed, the Webview enters into the ready status and notifies the Worker. The Worker calls the `page.onReady` function and enters into the active status.\n\n- in the active status, the Worker modifies data each time and then notifies the Webview for rendering. When switched to the background, the Worker calls the `page.onHide` function and enters into the suspended status. The `page.onShow` function will be called when  page returns to the foreground and enters into the active status. When the return or redirection page is called, the function `page.onUnload` is called for page destroying.\n\n![image](https://marmot-local-dev.oss-ap-southeast-1.aliyuncs.com/storage/2020/1/14/b4795a22-36fa-46ed-88ff-aa9ce1a28723.png)\n\n## Object Attribute Description\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Property** | **Type** | **Description** | **Minimum version** |\n| data | Object \\| Function | Function for initializing data or returning initialized data. | - |\n| events | Object | Event handler object. | 1.13.7 |\n| onLoad | Function(query: Object) | Trigger on page loading. | - |\n| onShow | Function | Trigger on page showing. | - |\n| onReady | Function | Trigger on completion of initial page rendering. | - |\n| onHide | Function | Trigger on page hiding. | - |\n| onUnload | Function | Trigger on page unloading. | - |\n| onShareAppMessage | Function(options: Object) | Trigger on clicking upper-right corner share. | - |\n| onTitleClick | Function | Trigger on clicking title. | - |\n| onOptionMenuClick | Function | Trigger on clicking extra icon of navigation bar. | 1.3.0 |\n| onPopMenuClick | Function | Trigger on clicking custom menu buttons in upper-right general menu. | 1.3.0 |\n| onPullDownRefresh | Function({from: `manual` \\| `code`}) | Trigger on pulling down page. | - |\n| onPullIntercept | Function | Trigger on pulling down interruption. | 1.11.0 |\n| onTabItemTap | Function | Trigger on clicking `tabItem`. | 1.11.0 |\n| onPageScroll | Function({scrollTop}) | Trigger on page scrolling. | - |\n| onReachBottom | Function | Trigger on pulling page till bottom. | - |\n| Others | Any | The developer can add any function or attribute column into the `object`. The `this` can be used for access in the page functions. | - |\n\n## Page Data Object\n\nThe initial `data` can be specified for the page by setting data.  When data is an object, it is shared by all pages. In other words, when it returns and then enters the page again, the last page data will be displayed instead of the initial `data`. In such a case, the issue may be fixed by setting data as unchanged data or changing data as page exclusive `data`.\n\n**Set as unchanged data**\n\ncopy\n\n```javascript\nPage({\n data: { arr:[] },\n doIt() {\n   this.setData({arr: [...this.data.arr, 1]});\n },\n});\n```\n\n**Set as page exclusive data (not recommended)**\n\ncopy\n\n```javascript\nPage({\n data() { return { arr:[] }; },\n doIt() {\n   this.setData({arr: [1, 2, 3]});\n },\n});\n```\n\n**Notes:**\n\nDo not modify `this.data` directly, which will not change the page status and will cause data inconsistency.\n\nFor example:\n\ncopy\n\n```javascript\nPage({\n data: { arr:[] },\n doIt() {\n   this.data.arr.push(1); // Do not do this!\n   this.setData({arr: this.data.arr});\n }\n});\n```\n\n## Lifecycle Function\n\n### onLoad(query: Object)\n\nTrigger on page initializing. It called only once for each page.\n\nThe query is the query object transferred in the `my.navigateTo` and `my.redirectTo`.\n\nThe query content is in the format: \"parameter name=parameter value&parameter name=parameter value…\"\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| query | Object | Parameter for opening the current page path. |\n\n### onShow()\n\nTrigger on page showing or switching to foreground\n\n### onReady()\n\nTrigger on completion of initial page rendering. It is called only once for each page, indicating the page is ready and can interact with view layer. For the setting of interface such as `my.setNavigationBar`, please set behind `onReady`.\n\n### onHide()\n\nTrigger on page hiding or switching to background. Such as `my.navigateTo` to another page or switching via bottom tab.\n\n### onUnload()\n\nTrigger on page unloading. Such as `my.redirectTo` or `my.navigateBack` to another page.\n\n## Page Event Handler\n\n### onShareAppMessage(options: Object)\n\nTrigger on clicking the **Share** button in upper-right general menu or clicking in-page **Share** button.\n\nDefine the `onShareAppMessage` function in `Page` and set the sharing information:\n\n- Display the **Share** button in the upper-right menu of every page by default. Only the shared content can be customized by using the `onShareAppMessage` function.\n- The `onShareAppMessage` function is called when the user clicks the **Share** button.\n- This event handler must return an Object to customize the shared content.\n- The mini program supports to trigger the sharing by using the button component. The value of `open-type` is `share`.\n\nSample codes:\n\ncopy\n\n```json\n// API-DEMO page/API/share/share.json\n {\n        \"defaultTitle\" : \"onShareAppMessage\"\n }\n```\n\ncopy\n\n```xml\n <view class = \"page\" >\n <view class = \"page-description\" > Click the upper-right menu to customize the sharing </view>\n </view>\n```\n\ncopy\n\n```javascript\n// API-DEMO page/API/share/share.js\n Page ({\n  onShareAppMessage () {\n  return {\n    title : 'Sharing the View component' ,\n    desc : 'The View component is general' ,\n    path : 'page/component/view/view' ,\n    };\n  },\n });\n```\n\nSample codes for triggering the sharing with the button component:\n\ncopy\n\n```json\n<view>\n<button type=\"primary\" open-type=\"share\" a:if=\"{{canIUseShareButton}}\">Share to friends</button>\n</view>\n```\n\ncopy\n\n```javascript\nPage({\n  data: { canIUseShareButton: true },\n  setShareButtonSwitch () { this.setData({ canIUseShareButton: my.canIUse('button.open-type.share') }) },\n    onLoad() { this.setShareButtonSwitch(); } ,\n\n    onShareAppMessage() {\n    return {\n      title: 'Mini program demo',\n      desc: 'Mini program official demo that displays the supported APIs and components',\n      path: 'page/component/component-pages/view/view?param=123'\n    }\n  }\n});\n```\n\nThe parameters are in Object type and have the following attributes:\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| from | String | Source of triggering sharing event. Valid values are:<br>- `button`: click the button in the page to trigger the sharing;<br>- `menu`: click the button in the upper-right menu to trigger the sharing;<br>- `code`: call the [my.showSharePanel](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/api_share_showsharepanel) API to trigger the sharing. |\n| target | Object | If the value of `from` is `button`, `target` is the `button` that triggers the event. Otherwise, `button` is `undefined`. |\n| webViewUrl | String | When the page contains the web-view component, return the URL of the current web-view. |\n\nThis event handler must return an Object to customize the shared content.\n\n**Return value**\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Property** | **Type** | **Required** | **Description** |\n| title | String | Yes | Customized sharing title. Max 50 characters. |\n| desc | String | No | Customized description about the sharing. The maximum length is 140 characters when sharing to Sina Weibo, so it's suggested that the description does not exceed 140 characters. |\n| path | String | Yes | Customized sharing path. The customized parameters in the path can be obtained from the `onLoad` lifecycle function and follow the HTTP GET rules. The path cannot contain the root directory (/). |\n| imageUrl | String | No | The path of the customized icon, which can be a web image path. Recommended Image size is 1200 x 630 pixels and should not be more than 8M, and Minimum image size is 200 x 200 pixels. |\n| bgImgUrl | String | No | The path of the customized image, which can be a web image path. The image size is suggested to be 750 x 825 pixels. |\n| success | Function | No | The callback method that indicates a successful sharing. |\n| fail | Function | No | The callback method that indicates a failed sharing. |\n\n**Success callback function**\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| channelName | String | The sharing channel. |\n| shareResult | Boolean | The result that indicates whether the sharing is successful. |\n\n### onTitleClick()\n\nTrigger on clicking title.\n\n### onOptionMenuClick()\n\nTrigger on clicking upper-right corner menu button.\n\n### onPopMenuClick()\n\nTrigger on clicking upper-right corner general menu button.\n\n### onPullDownRefresh({from: `manual` \\| `code`})\n\nTrigger on pulling down to refresh. It is required to enable `pullRefresh` in the `window` option of [app.json](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_app_global-configuration). When the data refresh is processed completely, call `my.stopPullDownRefresh` to stop the pull-to-refresh for that page.\n\n### onPullIntercept()\n\nTrigger on pulling down interruption.\n\n### onTabItemTap(object: Object)\n\nTrigger on clicking `tabItem`\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| from | String | Click source. |\n| pagePath | String | Page path of the clicked tabItem. |\n| text | String | Button text of the clicked tabItem. |\n| index | Number | Number of the clicked tabItem, starting from 0. |\n\n### onPageScroll({scrollTop})\n\nTrigger on page scrolling, `scrollTop` is the page scrolling distance.\n\n### onReachBottom()\n\nTrigger on pulling page till bottom.\n\n### Events\n\nTo simplify codes, a new `event` handler object events is available. The existing page handler is equivalent to the exposed event functions on the page instance.\n\n**Notes:**\n\n- The support for events starts from basic library version 1.13.7.\n\n- Please distinguish the basic library version requirements for the same named functions of the page event handler and events.\n\nBelow is the list of event functions supported by events:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Event** | **Type** | **Description** | **Lowest version** |\n| onBack | Function | Trigger on page returning. | 1.13.7 |\n| onKeyboardHeight | Function | Trigger on keyboard height changing. | 1.13.7 |\n| onOptionMenuClick | Function | Trigger on clicking upper-right corner menu button. | 1.13.7 |\n| onPopMenuClick | Function | Trigger on clicking upper-right corner general menu button. | 1.13.7 |\n| onPullIntercept | Function | Trigger on pulling down interruption. | 1.13.7 |\n| onPullDownRefresh | Function({from: manual/code}) | Trigger on pulling down page. | 1.13.7 |\n| onTitleClick | Function | Trigger on clicking title. | 1.13.7 |\n| onTabItemTap | Function | Trigger on click non-current tabItem. | 1.13.7 |\n| beforeTabItemTap | Function | Trigger before click non-current tabItem. | 1.13.7 |\n| onResize | Function({size: {windowWidth: number, windowHeight: number}}) | Trigger on window size changing. | 1.16.0 |\n\nSample code:\n\ncopy\n\n```javascript\n// Feature detection\nmy.canIUse('page.events.onBack');\n\nPage({\n  data: {\n    text: 'This is page data.'\n  },\n  onLoad(){\n    // trigger on page loading\n  },\n  events:{\n    onBack(){\n      // Trigger on page returning\n    },\n    onKeyboardHeight(e){\n      // Trigger on keyboard height changing\n      console.log('keyboard height:', e.height)\n    },\n    onOptionMenuClick(){\n      // Trigger on clicking upper-right corner menu button\n    },\n    onPopMenuClick(e){\n      // Trigger on clicking custom menu buttons in upper-right general menu\n      console.log('index of the clicked custom menu', e.index)\n      console.log('name of the clicked custom menu', e.name)\n      console.log('menuIconUrl of the clicked custom menu', e.menuIconUrl)\n    },\n    onPullIntercept(){\n      // Trigger on pulling down interruption\n    },\n    onPullDownRefresh(e){\n      // Trigger on pulling down page The e.from value “code” indicates the event triggered by startPullDownRefresh; value “manual” indicates the pull-down event trigger by user\n      console.log('type of triggered pull-down refresh', e.from)\n      my.stopPullDownRefresh()\n    },\n    onTitleClick(){\n      // Trigger on clicking title\n    },\n    onTabItemTap(e){\n      // e.from means triggering after clicking tabItem and switching; value “user” indicates event triggered by user clicking; value “api” indicates event triggered by switchTab\n      console.log('type of triggering tab change', e.from)\n      console.log('path of page corresponding to the clicked tab', e.pagePath)\n      console.log('text of the clicked tab', e.text)\n      console.log('index of the clicked tab', e.index)\n    },\n    beforeTabItemTap(){\n      // trigger on clicking tabItem but before switching\n    },\n    onResize(e){\n      // Trigger on window size changing\n      var {windowWidth, windowHeight} = e.size\n      console.log('width of changed window', windowWidth)\n      console.log('height of changed window', windowHeight)\n    },\n  }\n})\n```\n\n## Page.prototype.setData(data: Object, callback: Function)\n\nThe `setData` sends data from logic layer to view layer and changes the value of `this.data`.\n\nThe `Object` is expressed in the form `key: Value`.. The `key` value in `this.data` is changed to `value`. Here, the `key` can be flexibly provided in form of data path, such as `array[2].message`, `a.b.c.d`. It is not necessary to predefine in `this.data`.\n\nThe following points are worth attentions in use:\n\n1. It is invalid to modify `this.data` directly, which will not change the page status and will cause data inconsistency.\n\n2. Only the JSON supported data is supported.\n\n3. Try not to set too many data once.\n\n4. Do not set any value in the data as undefined, otherwise, that item will not be set, and potential issue may arise.\n\nSample code:\n\ncopy\n\n```html\n<view>{{text}}</view>\n<button onTap=\"changeTitle\"> Change normal data </button>\n<view>{{array[0].text}}</view>\n<button onTap=\"changeArray\"> Change Array data </button>\n<view>{{object.text}}</view>\n<button onTap=\"changePlanetColor\"> Change Object data </button>\n<view>{{newField.text}}</view>\n<button onTap=\"addNewKey\"> Add new data </button>\n<view>hello: {{name}}</view>\n<button onTap=\"changeName\"> Change name </button>\n```\n\ncopy\n\n```javascript\nPage({\n  data: {\n    text: 'test',\n    array: [{text: 'a'}],\n    object: {\n      text: 'blue',\n    },\n    name: 'Mini Program',\n  },\n  changeTitle() {\n    // Wrong! Do not modify the data directly\n    // this.data.text = 'changed data'\n\n    // Correct!\n    this.setData({\n      text: 'ha',\n    });\n  },\n  changeArray() {\n    // Possible to modify data by using directly data path\n    this.setData({\n      'array[0].text': 'b',\n    });\n  },\n  changePlanetColor(){\n    this.setData({\n      'object.text': 'red',\n    });\n  },\n  addNewKey() {\n    this.setData({\n      'newField.text': 'c',\n    });\n  },\n  changeName() {\n    this.setData({\n      name: 'Mini Program',\n    }, () => { // Accept transfer of callback function\n      console.log(this); // this: current page instance\n      this.setData({ name: this.data.name + ', ' + 'welcome!'});\n    });\n  },\n});\n```\n\nParameter description:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Event** | **Type** | **Description** | **Lowest version** |\n| data | Object | Data to be changed. | - |\n| callback | Function | Callback function, to be executed on completion of page rendering and update. | 1.7.0, Use `my.canIUse('page.setData.callback')` for compatibility processing. |\n\n## Page.prototype.$spliceData(data: Object, callback: Function)\n\n**Note:** `$spliceData` is supported since version 1.7.2. The **my.canIUse('page.$spliceData')** can be used for compatibility processing.\n\nSimilarly, the `spliceData` is used to transfer data from logic layer to view layer, but has higher performance than `setData` in processing long list.\n\nThe `Object` is expressed in the form `key: Value`.. The `key` value in `this.data` is changed to `value`. Here, the key can be flexibly provided in form of data path, such as `array[2].message`， `a.b.c.d`. It is not necessary to predefine in `this.data`. The `value` is an array (format: \\[start, deleteCount, ...items\\]). The first element of the array is the start position of the operation, the second element is the number of elements to be deleted, and other other elements are the insertion data. It maps the array `splice` method in `es5`.\n\nSample code:\n\ncopy\n\n```html\n<!-- pages/index/index.axml -->\n<view class=\"spliceData\">\n  <view a:for=\"{{a.b}}\" key=\"{{item}}\" style=\"border:1px solid red\">\n    {{item}}\n  </view>\n</view>\n```\n\ncopy\n\n```javascript\n// pages/index/index.js\nPage({\n  data: {\n    a: {\n      b: [1,2,3,4],\n    },\n  },\n  onLoad(){\n    this.$spliceData({ 'a.b': [1, 0, 5, 6] });\n  },\n});\n```\n\nPage output:\n\ncopy\n\n```plaintext\n1\n5\n6\n2\n3\n4\n```\n\nParameter description:\n\n|     |     |     |\n| --- | --- | --- |\n| **Event** | **Type** | **Description** |\n| data | Object | Data to be changed. |\n| callback | Function | Callback function, to be executed on completion of page rendering and update. |\n\n## Page.prototype.$batchedUpdates(callback: Function)\n\nBatch update data.\n\n**Note:** `$batchedUpdates` is supported since version 1.14.0. Themy.canIUse('page.$batchedUpdates') can be used for compatibility processing.\n\nParameter description:\n\n|     |     |     |\n| --- | --- | --- |\n| **Event** | **Type** | **Description** |\n| callback | Function | The data operation in the callback function will be updated in batch. |\n\nSample code:\n\ncopy\n\n```javascript\n// pages/index/index.js\nPage({\n  data: {\n    counter: 0,\n  },\n  plus() {\n    setTimeout(() => {\n      this.$batchedUpdates(() => {\n        this.setData({\n          counter: this.data.counter + 1,\n        });\n        this.setData({\n          counter: this.data.counter + 1,\n        });\n      });\n    }, 200);\n  },\n});\n```\n\ncopy\n\n```html\n<!-- pages/index/index.axml -->\n<view>{{counter}}</view>\n<button onTap=\"plus\">+2</button>\n```\n\n1. In this example, page `counter` adds 2 on each button clicking.\n\n2. The `setData` is placed within this.$batchedUpdates. Thus, only one data transfer happens despite of multiple `setData`.\n\n## Page.route\n\nPath of `Page`, mapping the path value configured in app.json, type `String`\n\n> This is a read-only attribute.\n\ncopy\n\n```javascript\nPage({\n  onShow() {\n    // Map the path value configured in app.json\n    console.log(this.route)\n  }\n})\n```\n\n九色鹿",
  "date": "2022-06-30",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_page_page-mechanism",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_framework_page_page-mechanism.json"
}