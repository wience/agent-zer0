{
  "title": "Understand the Mini Program File Structure",
  "content": "# Understand the Mini Program File Structure\n\n2021-05-09 18:43\n\n## Overview\n\nThis section uses Todo program demo as an example to introduce the file structure of Mini Program and the role of each file type in the Mini Program.\n\n### Directory Structure\n\nLet’s know about the overall directory structure of Mini Program from the following notes\n\ncopy\n\n```\nassets          // Store various static resources, such as images\ncomponents      // Custom component directory of Mini Program\n  --add-button  // Here we defined a component called add-button\npages           // All pages included in the Mini Program are placed under “pages”, one folder per page\n  --add-todo    // Mini Program page\n  --Todos       // Mini Program page\napp.js          // Here some global service logic is configured for the Mini Program, such as global method and global variables\napp.acss        // Global style configuration, here the styles take effect on every page\napp.json        // Some basic configuration info for the Mini Program pages, such as page path\n```\n\n## json\n\nThe json file is used to setup Mini Program configuration. For example, the `app.json` includes the related configuration of the whole Mini Program.\n\ncopy\n\n```json\n// app.json\n\n{\n  \"pages\": [\\\n    \"pages/todos/todos\",\\\n    \"pages/add-todo/add-todo\"\\\n  ],\n  \"window\": {\n    \"defaultTitle\": \"Todo App\",\n    \"titleBarColor\": \"#323239\"\n  }\n}\n```\n\n1. The pages attribute is an array. Each string in the array defines the page path of the Mini Program. In the demo of todo list, two directories are configured externally. It is required to add these page configuration after you adding some pages.\n\n2. The defaultTitle configuration in the window defines the title in the navigation bar of the Mini Program: \"Todo App\". The `titleBarColor` specifies the navigation bar's background color as hexadecimal color value.\n\nFor other configurations of the app.json file, click [here](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_app_global-configuration).\n\nThe above-mentioned json file includes the global json configurations. Each page or component has related json configuration to specify the component dependence and so on. [Click here](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_page_page-configuration).\n\n## axml\n\nGenerally, the axml can be regarded as the html of the Mini Program, which differs from the html in terms of:\n\n1. Different tags. For example, Mini Program uses  to replace .\n\n2. The types of tags supported by axml are fewer than html.\n\n3. The axml tag has its own parsing syntax to realize traverse, conditional judgment and other advanced operations. The html only includes static tags.\n\ncopy\n\n```html\n<view class=\"todo-item {{completed ? 'checked' : ''}}\">\n  {{number}}\n</view>\n```\n\nIn axml, the format like `{{ }}` is used to render variables or execute simple operation. For example, the “completed” above is a  ternary operation. When the “completed” is true, the class is rendered as “todo-item checked” or just ”todo-item”.\n\nThe `{{number}}` variable shows the results accordingly after rendering as per the assignment.\n\n## acss\n\nThe acss extends the css capability while supporting most of the css syntax. In contrast to css, the major differences are:\n\n1. Supporting rpx unit calculation\n\n2. Import acss in other path using `@import`\n\n3. For more details, click [here](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/framework_acss-reference).\n\n## js\n\nThe js file is used to describe the code logic. Each page needs a js file to describe the logic of the current page. The following codes are used for the illustration simply.\n\ncopy\n\n```javascript\n// pages/todos/todo.js\nconst app = getApp();\nPage({\n  data: {},\n  onLoad() {},\n  onTodoChanged(e) {}\n});\n```\n\nThe Page class is the constructor of the page, and should be written during the lifecycle of each page.\n\n1. data\n\n- The data object is considered as the axml rendering context. Simply put, if the data has a name with attribute 'Mini Program', the corresponding axml file can use the form {{name}} to read 'Mini Program'. When the setData method is used to make change in “data”, the data in axml changes in real time.\n\n2. onLoad\n\n- When this page is initialized at the first time by the user, this function is called.\n\n3. onTodoChanged (user customized function)\n\n- This is a user-customized method. The user can defines more custom functions to implement more capabilities.\n\nIn the above contents we have known about the function of each file type in the Mini Program. Next, we will explain Todo App demo in details.",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/quick-start_understand-the-mini-program-file-structure",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_quick-start_understand-the-mini-program-file-structure.json"
}