{
  "title": "Overview",
  "content": "# Overview\n\n2021-05-09 18:43\n\nMini Programs offers a set of OpenAPIs to achieve various capabilities, for example, the payment capability. You can use POST method to send HTTPS requests and receive response accordingly.\n\n# Message structure\n\nBefore you make any request, it is important to understand how OpenAPI works and how requests and responses are structured. This section presents general information (such as message structure, message fields, and message transmission) of online message between your system and wallet backend.\n\n## Request structure\n\nThe following figure illustrates the request structure.\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/342761/1614159303344-0c24c3c1-13d3-4c4e-bc97-4757f373b7be.png#align=left&display=inline&height=364&margin=%5Bobject%20Object%5D&name=image.png&originHeight=727&originWidth=1117&size=293564&status=done&style=stroke&width=558.5)\n\nFigure 1. Request structure\n\n### Request URL\n\nThe request URL is: `https://{host}/api/{restful_path}`\n\nwhere,\n\n- **host:** includes the host that is the standard domain name assigned by the wallet backend.\n- **resful\\_path** **:** is the path to the interface, for example, `/{version}/payments/pay`\n\n- **version**: is the version of OpenAPIs, for example, `v1` or `v2`.\n\nAn interface can be uniquely identified by `restful_path` .For example, the `/v1/payments/pay`  is different from `/v2/payments/pay`.\n\n### Request method\n\nPOST method is used to make an HTTP request.\n\n### Request header\n\nThe request header mainly contains the following fields.\n\nTip: Field names are case-insensitive.\n\n|     |     |     |\n| --- | --- | --- |\n| **Header field** | **Required** | **Code sample** |\n| Signature | Yes | `Signature: algorithm=RSA256, keyVersion=1, signature=****` |\n| Encrypt | No (It is used only when data includes sensitive information) | `Encrypt: algorithm=RSA_AES, keyVersion=1, symmetricKey=****` |\n| Content-Type | No | `Content-Type: application/json; charset=UTF-8` |\n| Client-Id | Yes | `Client-Id: ****` |\n| Request-Time | Yes | `Request-Time: 2019-04-04T12:08:56.253+05:30` |\n\nTable. Request header\n\nFor details of each header field, see the following description.\n\n**Signature**\n\nSignature contains key-value pairs that are separated by comma (,). Each key-value pair is an equation, which is a key joined with its value with an equal sign (=).\n\nThe following keys can be configured:\n\n- **algorithm**: Specifies the digital signature algorithm that is used to generate the signature. The value is not case-sensitive. RSA256 and ECC224 are supported, and RSA256 by default.\n- **keyVersion**: Specifies the key version that is used to generate or validate the signature. By default, the value is the latest version of the key associated with **Client-Id**.\n- **signature**: Contains the signature value of the request. For details about how to generate a signature, see the [**Generate a signature**](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api#HGNu0) section.\n\n\nExample:\n\ncopy\n\n```json\nSignature: algorithm=RSA256, keyVersion=1,\nsignature=KEhXthj4bJ801Hqw8kaLvEKc0Rii8KsNUazw7kZgjxyGSPuOZ48058UVJUkkR21iD9JkHBGR\nrWiHPae8ZRPuBagh2H3qu7fxY5GxVDWayJUhUYkr9m%2FOW4UQVmXaQ9yn%2Fw2dCtzwAW0htPHYrKMyrT\npMk%2BfDDmRflA%2FAMJhQ71yeyhufIA2PCJV8%2FCMOa46303A0WHhH0YPJ9%2FI0UeLVMWlJ1XcBo3Jr\nbRFvcowQwt0lP1XkoPmSLGpBevDE8%2FQ9WnxjPNDfrHnKgV2fp0hpMKVXNM%2BrLHNyMv3MkHg9iTMOD%\n2FFYDAwSd%2B6%2FEOFo9UbdlKcmodJwjKlQoxZZIzmF8w%3D%3Dxxxx\n```\n\n**Encrypt**\n\nThis field is required when a message need to be encrypted, especially when sensitive information is included in the message. **Encrypt** contains key-value pairs that are separated by comma (,). Each key-value pair is an equation, which is a key joined with its value with an equal sign (=).\n\nThe following keys can be configured:\n\n• **algorithm**: Specifies the symmetric key algorithm that is used to encrypt message. The value is not case-sensitive, and currently only RSA\\_AES is supported.\n\n• **keyVersion**: Specifies the symmetric key version that is used to encrypt message. By default, the value is the latest version of the key associated with clientId.\n\n• **symmetricKey**: Contains the encrypted symmetric key.\n\nFor example:\n\ncopy\n\n```\nEncrypt: algorithm=RSA_AES, keyVersion=1,\nsymmetricKey=bqS8HSmdaRrpKSuPy7CqUlyd8lJurG93xxxx\n```\n\n**Content-Type**\n\nOptional. **Content-Type** indicates the media type of the body of the request, as defined by [RFC2616](https://tools.ietf.org/html/rfc2616). In which, **charset** is used for generating/validating signature and encrypting/decrypting content.\n\nFor example：\n\ncopy\n\n```\nContent-Type: application/json; charset=UTF-8\n```\n\n**Client-Id**\n\n**Client-Id** is used to identify a client, and is associated with the keys that are used for signature and encryption.\n\nAlso in Mini Program OAuth scenario, here the**Client-Id** is also the client id of OAuth, which is filled in Mini Program SAAS platform as follow:\n\n![image.png](https://yuque.antfin.com/images/lark/0/2020/png/3664/1596457213911-448583ee-68c9-4d9e-9cf7-3da7bfe4c005.png#align=left&display=inline&height=600&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1200&originWidth=2120&size=535977&status=done&style=stroke&width=1060)\n\n**Request-Time**\n\nSpecifies the time when the request is sent, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Note: This field must be accurate to milliseconds.\n\ncopy\n\n```\nRequest-Time: 2019-04-04T12:08:56.253+05:30\n```\n\n### Request body\n\nThe request body contains the detailed request information in a JSON format. Fields enclosed in the request body vary depending on services. For more information, see the specific API specification.\n\n## Response structure\n\nThe following figures illustrate the response structure:\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/342761/1614159771958-88bb5729-722a-4266-859f-4a408205abb5.png#align=left&display=inline&height=354&margin=%5Bobject%20Object%5D&name=image.png&originHeight=707&originWidth=616&size=216864&status=done&style=stroke&width=308)\n\nFigure 2. Response structure\n\n### Response header\n\nThe response header carries the information about the response, mainly containing the following fields.\n\nTip: Field names are case-insensitive.\n\n|     |     |     |\n| --- | --- | --- |\n| **Header field** | **Required** | **Code sample** |\n| Signature | Yes | `Signature: algorithm=RSA256, keyVersion=1, signature=****` |\n| Encrypt | No (It is used only when data includes sensitive information) | `Encrypt: algorithm=RSA_AES, keyVersion=1, symmetricKey=****` |\n| Content-Type | No | `Content-Type: application/json; charset=UTF-8` |\n| traceId | No | `traceId: 0be9923****` |\n| Client-Id | Yes | `Client-Id: ****` |\n| Response-Time | Yes | `Response-Time: 2019-04-04T12:08:56.253+05:30` |\n\nTable. Response header\n\nFor details of each header field, see the following description.\n\n**Signature**\n\nSignature contains key-value pairs that are separated by comma (,). Each key-value pair is an equation, which is a key joined with its value with an equal sign (=).\n\nThe following keys can be configured:\n\n- **algorithm**: Specifies the digital signature algorithm that is used to generate the signature. The value is not case-sensitive. RSA256 and ECC224 are supported, and RSA256 by default.\n- **keyVersion**: Specifies the key version that is used to generate or validate the signature. By default, the value is the latest version of the key associated with **Client-Id**.\n- **signature**: Contains the signature value of the response.\n\nExample:\n\ncopy\n\n```json\nSignature: algorithm=RSA256, keyVersion=1,\nsignature=KEhXthj4bxxxJ801Hqw8kaLvEKc0Rii8KsNUazw7kZgjxyGSPuOZ48058UVJUkkR21iD9JkHBGR\nrWiHPae8ZRPuBagh2H3qu7fxY5GxVDWayJUhUYkr9m%2FOW4UQVmXaQ9yn%2Fw2dCtzwAW0htPHYrKMyrT\npMk%2BfDDmRflA%2FAMJhQ71yeyhufIA2PCJV8%2FCMOa46303A0WHhH0YPJ9%2FI0UeLVMWlJ1XcBo3Jr\nbRFvcowQwt0lP1XkoPmSLGpBevxxxDE8%2FQ9WnxjPNDfrHnKgV2fp0hpMKVXNM%2BrLHNyMv3MkHg9iTMOD%\n2FFYDAwSd%2B6%xxxx\n```\n\n**Encrypt**\n\nThis field is required when a response needs to be encrypted. **Encrypt** contains key-value pairs that are separated by comma (,). Each key-value pair is an equation, which is a key joined with its value with an equal sign (=).\n\nThe following keys can be configured:\n\n• **algorithm**: Specifies the symmetric key algorithm that is used to encrypt a message. The value is not case-sensitive, and currently only RSA\\_AES is supported.\n\n• **keyVersion**: Specifies the symmetric key version that is used to encrypt a message. By default, the value is the latest version of the key associated with clientId.\n\n• **symmetricKey**: Contains the encrypted symmetric key.\n\nFor example:\n\ncopy\n\n```json\nEncrypt: algorithm=RSA_AES, keyVersion=1,\nsymmetricKey=bqS8HSmdaRrpKSuPy7CqUlyd8lJurG93xxxx\n```\n\n**Content-Type**\n\nOptional. **Content-Type** indicates the media type of the body of the response, as defined by [RFC2616](https://tools.ietf.org/html/rfc2616). In which, **charset** is used for generating/validating the signature and encrypting/decrypting content.\n\nFor example：\n\ncopy\n\n```\nContent-Type: application/json; charset=UTF-8\n```\n\n**traceId**\n\nThe **traceId** field is used for troubleshooting when there is something wrong with a request processing. For example, use **traceId** to identify the specific request that has issues.\n\n**Client-Id**\n\n**Client-Id** is used to identify a client, and is associated with the keys that are used for signature and encryption.\n\n**Response****-Time**\n\nSpecifies the time when the response is returned, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Note: This field must be accurate to milliseconds.\n\ncopy\n\n```\nResponse-Time: 2019-04-04T14:08:56.253+05:30\n```\n\n### Response body\n\nResponse body contains the information responding to the client. Fields in this section vary depending on services. However, the `result` object, which indicates the result of an API call, is always contained.\n\nWhen the result status ( `resultStatus`) is failed, unknown, or accepted, the result code ( `resultCode` ) means an error code and the result message ( `resultMessage` ) means an error message, which is used for error handling. For more information about error codes, see the [Error codes](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/error_codes) chapter.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Field** | **Data type** | **Required** | **Description** |\n| resultStatus | String | No | Result status. Valid values are:<br>- `S` : Successful<br>- `F` : Failed<br>- `U` : Unknown<br>- `A` : accepted, not yet succeed, but can proceed with some actions. |\n| resultCode | String | No | Result code.<br>Max. length: 64 characters |\n| resultMessage | String | No | Result message that describes the result code in details.<br>Max. length: 256 characters |\n\n# Message transmission workflow\n\nThe following figure is an example that illustrates the message transmission workflow in Mini Program.\n\n![Overview](https://ac.alipay.com/storage/2020/5/11/793a3d8d-5270-405b-9362-e6a670b9c842.png)\n\nFigure 1. Message transmission workflow\n\n# Overall procedure\n\nFollow the overall procedure to call an API.\n\n### Preparations\n\nTo prevent some potential errors that you might get in the response, consider the following factors:\n\n- Understand [API idempontency](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/api_idempotency)\n\n## 1. Construct a request\n\nConstruct a request by complying with the[request structure](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/xxpbkg#3mLq0), including the request header and body.\n\nTo ensure the message transmission security, perform the following security measures when constructing a request. For details, see the [Message transmission security](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/msg_transmission_security) chapter.\n\n1. Encrypt a request when the data includes sensitive information or it is required by clients. If encryption is required, the message body should be encrypted before it is signed.\n2. Must [sign a request](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api). Message signing and signature validation is mandatory for all requests and responses.\n3. [Encode](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api#HGNu0) a request to prevent errors or ambiguity that might be caused by special charaters enclosed in a request. For more information, see the [Message encoding](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/encode) chapter.\n\n## 2\\. Send a request\n\nYou can send a request for example via Postman or cURL command.\n\n## 3\\. Check the response\n\nThe response is returned usually in JSON or XML format. For details about the response, see the [Response structure](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/xxpbkg#HaW6U) section.\n\nAfter you receive the response, perform the following actions:\n\n1. [Validate the signature of the response](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/call_api#2QWY3).\n2. Decrypt the response if the request is encrypted.\n\n## 4\\. Check the status code\n\nIf an error occurs when you call an API, an error response is returned, where [the `result` object](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/xxpbkg#GN2yb) indicates the error code and error message for you to troubleshoot issues.",
  "date": "2021-05-09",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev-old/xxpbkg",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev-old_xxpbkg.json"
}