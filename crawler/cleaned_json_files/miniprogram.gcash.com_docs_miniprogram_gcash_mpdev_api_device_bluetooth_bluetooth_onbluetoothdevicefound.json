{
  "title": "my.onBluetoothDeviceFound",
  "content": "# my.onBluetoothDeviceFound\n\n2022-07-03 18:44\n\nUse this API when a new Bluetooth device is found.\n\n**Instructions:**\n\n- You may not get the advertisData and RSSI in the emulator. Please debug in the guest.\n\n- For Integrated Development Environment (IDE) and Android devices, the device ID is the MAC address of the device; for iOS devie, the device ID is the UUID of the device. Therefore, do not hard code the device ID. You need to process the device ID on different platforms; iOS devices can be dynamically matched based on properties such as localName, advertisData, and manufacturerData.\n\n- If the API my.onBluetoothDeviceFound callback contains a bluetooth device, the device is added to the array obtained by the API [my.getBluetoothDevices](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_device_bluetooth_bluetooth_getbluetoothdevices) .\n\n**Note:**\n\nCurrently simulation in IDE is not supported. Please debug in the production environment.\n\n## Code Sample\n\ncopy\n\n```css\n/* .acss */\n.help-info {\n  padding:10px;\n  color:#000000;\n}\n.help-title {\n  padding:10px;\n  color:#FC0D1B;\n}\n```\n\ncopy\n\n```json\n// .json\n{\n    \"defaultTitle\": \"Bluetooth\"\n}\n```\n\ncopy\n\n```html\n<!-- .axml-->\n<view class=\"page\">\n  <view class=\"page-description\">Bluetooth API</view>\n  <view class=\"page-section\">\n    <view class=\"page-section-title\">The Bluetooth state</view>\n    <view class=\"page-section-demo\">\n       <button type=\"primary\" onTap=\"openBluetoothAdapter\">Initialize Bluetooth</button>\n       <button type=\"primary\" onTap=\"closeBluetoothAdapter\">Close Bluetooth</button>\n       <button type=\"primary\" onTap=\"getBluetoothAdapterState\">Obtain Bluetooth state</button>\n    </view>\n    <view class=\"page-section-title\">Scan the Bluetooth device</view>\n    <view class=\"page-section-demo\">\n       <button type=\"primary\" onTap=\"startBluetoothDevicesDiscovery\">Start searching</button>\n       <button type=\"primary\" onTap=\"getBluetoothDevices\">All devices found</button>\n       <button type=\"primary\" onTap=\"getConnectedBluetoothDevices\">All devices connected</button>\n       <button type=\"primary\" onTap=\"stopBluetoothDevicesDiscovery\">Stop searching</button>\n    </view>\n    <view class=\"page-section-title\">Connect the device</view>\n    <view class=\"page-section-demo\">\n       <input class=\"input\" onInput=\"bindKeyInput\" type=\"{{text}}\" placeholder=\"Enter the device ID of the device to connect\"></input>\n       <button type=\"primary\" onTap=\"connectBLEDevice\">Connect the device</button>\n       <button type=\"primary\" onTap=\"getBLEDeviceServices\">Obtain device services</button>\n       <button type=\"primary\" onTap=\"getBLEDeviceCharacteristics\">Obtain read and write characteristics</button>\n       <button type=\"primary\" onTap=\"disconnectBLEDevice\">Disconnect the device</button>\n    </view>\n     <view class=\"page-section-title\">Read and write data</view>\n     <view class=\"page-section-demo\">\n       <button type=\"primary\" onTap=\"notifyBLECharacteristicValueChange\">Listens to the characteristic data change</button>\n       <button type=\"primary\" onTap=\"readBLECharacteristicValue\">Read data</button>\n       <button type=\"primary\" onTap=\"writeBLECharacteristicValue\">Write data</button>\n       <button type=\"primary\" onTap=\"offBLECharacteristicValueChange\">Un-listens to characteristic value</button>\n    </view>\n     <view class=\"page-section-title\">Other events</view>\n     <view class=\"page-section-demo\">\n       <button type=\"primary\" onTap=\"bluetoothAdapterStateChange\">Changes of the Bluetooth state</button>\n       <button type=\"primary\" onTap=\"offBluetoothAdapterStateChange\">Un-listens to Bluetooth state</button>\n       <button type=\"primary\" onTap=\"BLEConnectionStateChanged\">Changes of Bluetooth connection state</button>\n       <button type=\"primary\" onTap=\"offBLEConnectionStateChanged\">Un-listens to Bluetooth connection state</button>\n\n    </view>\n  </view>\n</view>\n```\n\ncopy\n\n```javascript\n// .js\nPage({\n  data: {\n    devid: '0D9C82AD-1CC0-414D-9526-119E08D28124',\n    serid: 'FEE7',\n    notifyId: '36F6',\n    writeId: '36F5',\n    charid: '',\n    alldev: [{ deviceId: '' }],\n  },\n\n  //Obtain the Bluetooth state\n  openBluetoothAdapter() {\n    my.openBluetoothAdapter({\n      success: res => {\n        if (!res.isSupportBLE) {\n          my.alert({ content: 'Sorry, your mobile Bluetooth is unavailable temporarily' });\n          return;\n        }\n        my.alert({ content: 'Succeeded to initialize!' });\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n  closeBluetoothAdapter() {\n    my.closeBluetoothAdapter({\n      success: () => {\n        my.alert({ content: 'Bluetooth closed!' });\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n  getBluetoothAdapterState() {\n    my.getBluetoothAdapterState({\n      success: res => {\n        if (!res.available) {\n          my.alert({ content: 'Sorry, your mobile Bluetooth is unavailable temporarily' });\n          return;\n        }\n        my.alert({ content: JSON.stringify(res) });\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n\n  //Scan the Bluetooth device\n  startBluetoothDevicesDiscovery() {\n    my.startBluetoothDevicesDiscovery({\n      allowDuplicatesKey: false,\n      success: () => {\n        my.onBluetoothDeviceFound({\n          success: res => {\n            // my.alert({content:'Listens to new device'+JSON.stringify(res)});\n            var deviceArray = res.devices;\n            for (var i = deviceArray.length - 1; i >= 0; i--) {\n              var deviceObj = deviceArray[i];\n              //Pair the target device with the device name or broadcast data, and then record the device ID for later use.\n              if (deviceObj.name == this.data.name) {\n                my.alert({ content: 'Target device is found' });\n                my.offBluetoothDeviceFound();\n                this.setData({\n                  deviceId: deviceObj.deviceId,\n                });\n                break;\n              }\n            }\n          },\n          fail: error => {\n            my.alert({ content: 'Failed to listen to new device' + JSON.stringify(error) });\n          },\n        });\n      },\n      fail: error => {\n        my.alert({ content: 'Failed to start scanning' + JSON.stringify(error) });\n      },\n    });\n  },\n\n  //Stop scanning\n  stopBluetoothDevicesDiscovery() {\n    my.stopBluetoothDevicesDiscovery({\n      success: res => {\n        my.offBluetoothDeviceFound();\n        my.alert({ content: 'Succeeded!' });\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n\n  //Obtain the connected device\n  getConnectedBluetoothDevices() {\n    my.getConnectedBluetoothDevices({\n      success: res => {\n        if (res.devices.length === 0) {\n          my.alert({ content: 'No connecting devices!' });\n          return;\n        }\n        my.alert({ content: JSON.stringify(res) });\n        devid = res.devices[0].deviceId;\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n\n  //Obtain all searched devices\n  getBluetoothDevices() {\n    my.getBluetoothDevices({\n      success: res => {\n        my.alert({ content: JSON.stringify(res) });\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n  bindKeyInput(e) {\n    this.setData({\n      devid: e.detail.value,\n    });\n  },\n\n  //Connect the device\n  connectBLEDevice() {\n    my.connectBLEDevice({\n      deviceId: this.data.devid,\n      success: res => {\n        my.alert({ content: 'Succeeded to connect!' });\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n\n  //Disconnect the device\n  disconnectBLEDevice() {\n    my.disconnectBLEDevice({\n      deviceId: this.data.devid,\n      success: () => {\n        my.alert({ content: 'Succeeded to disconnect!' });\n      },\n      fail: error => {\n        my.alert({ content: JSON.stringify(error) });\n      },\n    });\n  },\n\n  //Obtain the services of the connected device\n  getBLEDeviceServices() {\n    my.getConnectedBluetoothDevices({\n      success: res => {\n        if (res.devices.length === 0) {\n          my.alert({ content: 'No connected devices' });\n          return;\n        }\n        my.getBLEDeviceServices({\n          deviceId: this.data.devid,\n          success: res => {\n            my.alert({ content: JSON.stringify(res) });\n            this.setData({\n              serid: res.services[0].serviceId,\n            });\n          },\n          fail: error => {\n            my.alert({ content: JSON.stringify(error) });\n          },\n        });\n      },\n    });\n  },\n\n  //Obtain the char ID of the connected device, read and write characteristics are respectively screened out.\n  getBLEDeviceCharacteristics() {\n    my.getConnectedBluetoothDevices({\n      success: res => {\n        if (res.devices.length === 0) {\n          my.alert({ content: 'No connected devices' });\n          return;\n        }\n        this.setData({\n          devid: res.devices[0].deviceId,\n        });\n        my.getBLEDeviceCharacteristics({\n          deviceId: this.data.devid,\n          serviceId: this.data.serid,\n          success: res => {\n            my.alert({ content: JSON.stringify(res) });\n            //See the related document for more information of the properties of the characteristics. Pair the characteristics according to the properties and record the value for later use.\n            this.setData({\n              charid: res.characteristics[0].characteristicId,\n            });\n          },\n          fail: error => {\n            my.alert({ content: JSON.stringify(error) });\n          },\n        });\n      },\n    });\n  },\n\n  //Read and write data\n  readBLECharacteristicValue() {\n    my.getConnectedBluetoothDevices({\n      success: res => {\n        if (res.devices.length === 0) {\n          my.alert({ content: 'No connected devices' });\n          return;\n        }\n        this.setData({\n          devid: res.devices[0].deviceId,\n        });\n        my.readBLECharacteristicValue({\n          deviceId: this.data.devid,\n          serviceId: this.data.serid,\n          characteristicId: this.data.notifyId,\n          //1、Android reading service\n          // serviceId:'0000180d-0000-1000-8000-00805f9b34fb',\n          // characteristicId:'00002a38-0000-1000-8000-00805f9b34fb',\n          success: res => {\n            my.alert({ content: JSON.stringify(res) });\n          },\n          fail: error => {\n            my.alert({ content: 'Failed to read' + JSON.stringify(error) });\n          },\n        });\n      },\n    });\n  },\n  writeBLECharacteristicValue() {\n    my.getConnectedBluetoothDevices({\n      success: res => {\n        if (res.devices.length === 0) {\n          my.alert({ content: 'No connected devices' });\n          return;\n        }\n        this.setData({\n          devid: res.devices[0].deviceId,\n        });\n        my.writeBLECharacteristicValue({\n          deviceId: this.data.devid,\n          serviceId: this.data.serid,\n          characteristicId: this.data.charid,\n          //Android writing service\n          //serviceId:'0000180d-0000-1000-8000-00805f9b34fb',\n          //characteristicId:'00002a39-0000-1000-8000-00805f9b34fb',\n          value: 'ABCD',\n          success: res => {\n            my.alert({ content: 'Succeeded to write data!' });\n          },\n          fail: error => {\n            my.alert({ content: JSON.stringify(error) });\n          },\n        });\n      },\n    });\n  },\n  notifyBLECharacteristicValueChange() {\n    my.getConnectedBluetoothDevices({\n      success: res => {\n        if (res.devices.length === 0) {\n          my.alert({ content: 'No connected devices' });\n          return;\n        }\n        this.setData({\n          devid: res.devices[0].deviceId,\n        });\n        my.notifyBLECharacteristicValueChange({\n          state: true,\n          deviceId: this.data.devid,\n          serviceId: this.data.serid,\n          characteristicId: this.data.notifyId,\n          success: () => {\n            //Listens to characteristic change events\n            my.onBLECharacteristicValueChange({\n              success: res => {\n                //  my.alert({content: 'Changes of characteristics：'+JSON.stringify(res)});\n                my.alert({ content: 'Obtain the response data = ' + res.value });\n              },\n            });\n            my.alert({ content: 'Succeeded to listen' });\n          },\n          fail: error => {\n            my.alert({ content: 'Failed to listen' + JSON.stringify(error) });\n          },\n        });\n      },\n    });\n  },\n  offBLECharacteristicValueChange() {\n    my.offBLECharacteristicValueChange();\n  },\n\n  //Other events\n  bluetoothAdapterStateChange() {\n    my.onBluetoothAdapterStateChange(this.getBind('onBluetoothAdapterStateChange'));\n  },\n  onBluetoothAdapterStateChange() {\n    if (res.error) {\n      my.alert({ content: JSON.stringify(error) });\n    } else {\n      my.alert({ content: 'Changes of the Bluetooth state：' + JSON.stringify(res) });\n    }\n  },\n  offBluetoothAdapterStateChange() {\n    my.offBluetoothAdapterStateChange(this.getBind('onBluetoothAdapterStateChange'));\n  },\n  getBind(name) {\n    if (!this[`bind${name}`]) {\n      this[`bind${name}`] = this[name].bind(this);\n    }\n    return this[`bind${name}`];\n  },\n  BLEConnectionStateChanged() {\n    my.onBLEConnectionStateChanged(this.getBind('onBLEConnectionStateChanged'));\n  },\n  onBLEConnectionStateChanged(res) {\n    if (res.error) {\n      my.alert({ content: JSON.stringify(error) });\n    } else {\n      my.alert({ content: 'Changes of connection state：' + JSON.stringify(res) });\n    }\n  },\n  offBLEConnectionStateChanged() {\n    my.offBLEConnectionStateChanged(this.getBind('onBLEConnectionStateChanged'));\n  },\n  onUnload() {\n    this.offBLEConnectionStateChanged();\n    this.offBLECharacteristicValueChange();\n    this.offBluetoothAdapterStateChange();\n    this.closeBluetoothAdapter();\n  },\n});\n```\n\n## Success Callback Function\n\nThe input parameters are displayed in the following table:\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| devices | Array | A list of all the devices that are newly discovered. |\n\n### Device Object\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| name | String | Name of the bluetooth device.(For some devices, there's no name.) |\n| deviceName (Compatible with initial version) | String | Name of the bluetooth device. |\n| localName | String | Name of the local device. |\n| deviceId | String | Device ID. |\n| RSSI | Number | Received Signal Strength Indicator. |\n| advertisData | Hex String | Advertisement data of the device. |",
  "date": "2022-07-03",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_device_bluetooth_bluetooth_onbluetoothdevicefound",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_api_device_bluetooth_bluetooth_onbluetoothdevicefound.json"
}