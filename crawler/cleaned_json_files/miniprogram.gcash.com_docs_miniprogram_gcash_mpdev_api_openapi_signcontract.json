{
  "title": "my.signContract",
  "content": "# my.signContract\n\n2022-07-03 18:44\n\nUse this API to redirect the user to the authorization page. After the user completes the authorization, the app will return the authorization code which can be used to obtain the access token for the agreement payment.\n\n**Note:**\n\nPlease make sure you use the Appx with 1.24.6 or higher versions in order to use this API.\n\nBelow is a diagram that illustrates how the interaction works:\n\n![my.signContract](https://gw.alipayobjects.com/mdn/rms_150082/afts/img/A*pTVkTbjfSQgAAAAAAAAAAABkARQnAQ#align=left&display=inline&height=1518&margin=%5Bobject%20Object%5D&originHeight=1518&originWidth=2532&status=done&style=none&width=2532)\n\nThe merchant Mini Program server can call [authorization consult API](https://global.alipay.com/doc/ams/authconsult) in step 2 to get the sign content with an authorization URL. Then the Mini Program will call the `my.signContract` JSAPI to invoke the authorization process. After the user completes the authorization, the Mini Program sends JSAPI result to its server so that the server can call [apply token API](https://global.alipay.com/doc/ams/accesstokenapp) to get accessToken.\n\n## Sample code\n\ncopy\n\n```javascript\nmy.signContract({\n  signStr: 'https://openauth.xxx.com/authentication.htm?authId=FBF16F91-28FB-47EC-B9BE-27B285C23CD3',\n  success: (res) => {\n    my.alert({\n    content: JSON.stringify(res),\n  });\n  },\n  fail: (res) => {\n    my.alert({\n    content: JSON.stringify(res),\n  });\n  }\n});\n```\n\n## Parameters\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Property** | **Type** | **Required** | **Description** |\n| signStr | String | Yes | This parameter is the authorization string returned by the app to further the authorization process. |\n| success | Function | No | Callback function upon call success. |\n| fail | Function | No | Callback function upon call failure. |\n| complete | Function | No | Callback function upon call completion (to be executed upon either call success or failure). |\n\n### Success Callback Function\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| authState | String | The authorization status. It is generated in Mini Program server and sent to app server. The maximum length is 256. Refer [here](https://global.alipay.com/docs/ac/ams/authconsult#OuIMM) for details. |\n| authCode | String | The authorization code assigned by app which can be used to obtain the access token for the agreement payment. The maximum length is 32. |\n\nAn example of a successfully returned message is as follows:\n\ncopy\n\n```json\n{\n\t\"authState\":\"663A8FA9-D836-48EE-8AA1-1FF682989DC7\",\n\t\"authCode\":\"663A8FA9D83648EE8AA11FF682989DC7\"\n}\n```\n\n### Fail Callback Function\n\n|     |     |     |\n| --- | --- | --- |\n| **Property** | **Type** | **Description** |\n| error | String | The error code for the failure. |\n| errMessage | String | The error message. |\n\n## Error Code\n\nWhen error happens, the fail callback function will be executed. The error code can refer to the following table.\n\n|     |     |\n| --- | --- |\n| **Error Code** | **Description** |\n| 6001 | User cancels the sign process. |\n| 6002 | The sign fails because of network error. |\n| 7001 | The result of the sign is unknown, it may be successful. |\n| 7002 | The sign fails. |",
  "date": "2022-07-03",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_openapi_signcontract",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_api_openapi_signcontract.json"
}