{
  "title": "Condition Rendering",
  "content": "# Condition Rendering\n\n2022-07-03 18:44\n\n## a:if\n\nIn an `axml`, `a:if=\"{{condition}}‚Äù` is used to tell whether a code block is to be rendered.\n\ncopy\n\n```html\n<view a:if=\"{{condition}}\"> True </view>\n```\n\nBesides, `a:elif` and `a:else` can be used to add an `else` branch.\n\ncopy\n\n```html\n<view a:if=\"{{length > 5}}\"> 1 </view>\n<view a:elif=\"{{length > 2}}\"> 2 </view>\n<view a:else> 3 </view>\n```\n\n## block a:if\n\nBecause `a:if` is a control attribute, and can only be used in one component. For conditional rendering of multiple components at once, an `<block/>` component can be used to contain those components, and add one `a:if` to control.\n\ncopy\n\n```html\n<block a:if=\"{{true}}\">\n  <view> view1 </view>\n  <view> view2 </view>\n</block>\n```\n\nNote: `<Block/>` is not a component but just a packaging element. It does not render anything in the page but accepts control attribute only.\n\n## Compare a:if with hidden\n\n- The template in `a:if` may contain data binding. So, when the `a:if` condition value changes, the framework has a process of local rendering which is used to ensure destroy or re-render in case of the change. In addition, when the initial render condition is false, the `a:if` does not trigger any render action, and starts local rendering when the condition turns true for the first time.\n\n- The `hidden` controls show/hide, but the component is always rendered.\n\nGenerally, the `a:if` has a higher overhead when frequently toggled, while the `hidden` has a higher initial rendering overhead. As a result, `hidden` is better for frequent toggles. If the running conditions do not toggle much, `a:if` is preferred.",
  "date": "2022-07-03",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/framework_axml-reference_condition-rendering",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_framework_axml-reference_condition-rendering.json"
}