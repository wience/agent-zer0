{
  "title": "List Rendering",
  "content": "# List Rendering\n\n2022-07-03 18:44\n\n## a:for\n\nUsing `a:for` attribute on component can bind an array, and then the data in the array can be used to render the component repeatedly.\n\nThe current item in the array has a default subscript variable name `index`. The current item of the array has a default variable name `item`.\n\ncopy\n\n```html\n<view a:for=\"{{array}}\">\n  {{index}}: {{item.message}}\n</view>\n```\n\ncopy\n\n```javascript\nPage({\n  data: {\n    array: [{\\\n      message: 'foo',\\\n    }, {\\\n      message: 'bar',\\\n    }],\n  },\n});\n```\n\nUse `a:for-item` to specify the variable name for the current element of the array. Use `a:for-index` to specify the current subscript variable name of the array.\n\ncopy\n\n```html\n<view a:for=\"{{array}}\" a:for-index=\"idx\" a:for-item=\"itemName\">\n  {{idx}}: {{itemName.message}}\n</view>\n```\n\n`A:for` supports nesting.\n\nBelow are the sample codes for the Multiplication Table nesting.\n\ncopy\n\n```html\n<view a:for=\"{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}\" a:for-item=\"i\">\n  <view a:for=\"{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}\" a:for-item=\"j\">\n    <view a:if=\"{{i <= j}}\">\n      {{i}} * {{j}} = {{i * j}}\n    </view>\n  </view>\n</view>\n```\n\n## block a:for\n\nSimilar to block `a:if`, `a:for` can be used on the `<block/>` tag to render a structural block with multiple nodes.\n\ncopy\n\n```html\n<block a:for=\"{{[1, 2, 3]}}\">\n  <view> {{index}}: </view>\n  <view> {{item}} </view>\n</block>\n```\n\n## a:key\n\nIf the list item may change position dynamically or new item will be added into the list, and it is expected to maintain the features and state of the list item (such as the entry contents of `<input/>` and the checked status of `<switch/>`), the `a:key` should be used to specify the unique identifier of the list item.\n\nThe `a:key` value is provided in one of the two modes:\n\n- String: Representing an attribute of the list item. The attribute value needs to be a unique string or number in the list, such as ID, and cannot change dynamically.\n\n- Reserved keyword `*this`: Representing the list item itself. Moreover, it is the unique string or number. For example, when the change of the current data triggers re-rendering, the component with `key` will be rectified. The framework ensures they are reordered, but not recreated. In this way, the component can maintain its status, increasing the list rendering efficiency.\n\nNote:\n\n- If the `a:key` is not provided, it reports a warning.\n\n- This can be ignored if it is known the list is static or the order is not concerned.\n\nBelow are the sample codes:\n\ncopy\n\n```html\n<view class=\"container\">\n  <view a:for=\"{{list}}\" a:key=\"*this\">\n    <view onTap=\"bringToFront\" data-value=\"{{item}}\">\n    {{item}}: click to bring to front\n    </view>\n  </view>\n</view>\n```\n\ncopy\n\n```javascript\nPage({\n  data:{\n    list:['1', '2', '3', '4'],\n  },\n  bringToFront(e) {\n    const { value } = e.target.dataset;\n    const list = this.data.list.concat();\n    const index = list.indexOf(value);\n    if (index !== -1) {\n      list.splice(index, 1);\n      list.unshift(value);\n      this.setData({ list });\n    }\n  },\n});\n```\n\n## key\n\nThe `key` is a more popular writing style than `a:key`, where any expression and string can be filled.\n\nNote: The `key` can not be set on block.\n\nBelow are the sample codes:\n\ncopy\n\n```html\n<view class=\"container\">\n  <view a:for=\"{{list}}\" key=\"{{item}}\">\n    <view onTap=\"bringToFront\" data-value=\"{{item}}\">\n    {{item}}: click to bring to front\n    </view>\n  </view>\n</view>\n```\n\ncopy\n\n```javascript\nPage({\n  data:{\n    list:['1', '2', '3', '4'],\n  },\n  bringToFront(e) {\n    const { value } = e.target.dataset;\n    const list = this.data.list.concat();\n    const index = list.indexOf(value);\n    if (index !== -1) {\n      list.splice(index, 1);\n      list.unshift(value);\n      this.setData({ list });\n    }\n  },\n});\n```",
  "date": "2022-07-03",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/framework_axml-reference_list-rendering",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_framework_axml-reference_list-rendering.json"
}