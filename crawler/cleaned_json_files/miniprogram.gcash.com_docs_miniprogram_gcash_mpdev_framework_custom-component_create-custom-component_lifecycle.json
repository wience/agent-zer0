{
  "title": "Lifecycle",
  "content": "# Lifecycle\n\n2022-07-03 18:44\n\n## Lifecycle Function\n\nThe lifecycle function of component is triggered by framework at special timing. Its detailed information is described in table below.\n\n|     |     |     |\n| --- | --- | --- |\n| **Lifecycle** | **Parameter** | **Description** |\n| onInit | No | Trigger on component creation. |\n| deriveDataFromProps | nextProps | Trigger on component creation and before update. |\n| didMount | No | Trigger on component creation completion. |\n| didUpdate | (prevProps,prevData) | Trigger on component update completion. |\n| didUnmount | No | Trigger on component deletion. |\n\n### onInit\n\nThe onInit is triggered on component creation. In onInit, it is possible to:\n\n- Access such attributes as this.is, this.$id and this.$page\n\n- Access  this.data and this.props\n\n- Access the custom attribute in component “methods”\n\n- Call this.setData and this.$spliceData to modify data\n\n**Example 1:**\n\ncopy\n\n```javascript\n// /components/counter/index.js\nComponent({\n  data: {\n\tcounter: 0,\n  },\n  onInit() {\n\tthis.setData({\n\t  counter: 1,\n\t  is: this.is,\n\t});\n  },\n})\n```\n\ncopy\n\n```html\n<!-- /components/counter/index.axml -->\n<view>{{counter}}</view>\n<view>{{is}}</view>\n```\n\nWhen the component is rendered on the page, the page output is as below:\n\ncopy\n\n```\n1\n/components/counter/index\n```\n\n**Example 2:**\n\ncopy\n\n```javascript\n// /components/counter/index.js\nComponent({\n  onInit() {\n\tthis.xxx = 2;\n\tthis.data = { counter: 0 };\n  },\n})\n```\n\ncopy\n\n```html\n<!-- /components/counter/index.axml -->\n<view>{{counter}}</view>\n```\n\nWhen the component is rendered on the page, the page output is as below:\n\ncopy\n\n```\n0\n```\n\n### deriveDataFromProps\n\nThe deriveDataFromProps is triggered on component creation and update. In the deriveDataFromProps, it is possible to:\n\n- Access such attributes as this.is, this.$id and this.$page\n\n- Access  this.data and this.props\n\n- Access the custom attribute in component “methods”\n\n- Call this.setData and this.$spliceData to modify data\n\n- Use the nextProps parameter to get the props parameter to be updated\n\n**Sample code:**\n\n**Note**\n\nIn this example, click the + button, and the counter on the page remains unchanged till the pCounter value is greater than 5.\n\ncopy\n\n```javascript\n// /components/counter/index.js\nComponent({\n  data: {\n\tcounter: 5,\n  },\n  deriveDataFromProps(nextProps) {\n\tif (this.data.counter < nextProps.pCounter) {\n\t  this.setData({\n\t\tcounter: nextProps.pCounter,\n\t  });\n\t}\n  },\n})\n```\n\ncopy\n\n```html\n<!-- /components/counter/index.axml -->\n<view>{{counter}}</view>\n```\n\ncopy\n\n```javascript\n// /pages/index/index.js\nPage({\n  data: {\n\tcounter: 1,\n  },\n  plus() {\n\tthis.setData({ counter: this.data.counter + 1 })\n  },\n})\n```\n\ncopy\n\n```html\n<!-- /pages/index/index.axml -->\n<counter pCounter=\"{{counter}}\" />\n<button onTap=\"plus\">+</button>\n```\n\n### didMount\n\nThe didMount is the callback after the initial renderof the custom component. Now the page has been rendered, and usually server end data is requested.\n\n**Sample code:**\n\ncopy\n\n```javascript\nComponent({\n  data: {},\n  didMount() {\n    let that = this;\n    my.httpRequest({\n      url: 'http://httpbin.org/post',\n      success: function(res) {\n\t\tconsole.log(res);\n        that.setData({name: 'Name Example'});\n      }\n    });\n  },\n});\n```\n\n### didUpdate\n\nThe didUpdate is the callback after the update of custom component. It is called whenever the component data changes.\n\n**Sample code:**\n\ncopy\n\n```javascript\nComponent({\n  data: {},\n  didUpdate(prevProps, prevData) {\n    console.log(prevProps, this.props, prevData, this.data);\n  },\n});\n```\n\n**Note**:\n\n- Internal call of **this.setData** in the component triggers didUpdate\n\n- External call of **this.setData** triggers didUpdate, too\n\n\n### didUnmount\n\nThe didUnmount is the callback after the custom component deletion. It is called whenever the component instance is unloaded from the page.\n\n**Sample code:**\n\ncopy\n\n```\nComponent({\n  data: {},\n  didUnmount() {\n    console.log(this);\n  },\n});\n```\n\n## Component Lifecycle Illustration\n\n![Lifecycle](https://marmot-local-dev.oss-ap-southeast-1.aliyuncs.com/storage/2020/1/14/d7040954-ae3e-4402-9a76-c069053ee191.png#align=left&display=inline&height=2004&margin=%5Bobject%20Object%5D&originHeight=2004&originWidth=3644&status=done&style=stroke&width=3644)",
  "date": "2022-07-03",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/framework_custom-component_create-custom-component_lifecycle",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_framework_custom-component_create-custom-component_lifecycle.json"
}