{
  "title": "Event Introduction",
  "content": "# Event Introduction\n\n2022-07-03 18:44\n\n## What is event?\n\n- Event is the way of communication from the view layer to logic layer.\n\n- The event feeds user behaviors back to logic layer for handling.\n\n- Event can be bound to component. When the trigger condition happens, the corresponding event handler is executed in the logic layer.\n\n- Event object can carry additional information, such as id, dataset and touches.\n\n## Usage\n\nIf you want to bind an event handler in a component, for example `onTap`, you need to define the `onTap` function in the `Page` object in the relative `.js` file.\n\ncopy\n\n```html\n<view id=\"tapTest\" data-hi=\"Mini Program\" onTap=\"tapName\">\n  <view id=\"tapTestInner\" data-hi=\"Mini Program Inner\">\n    Click me!\n  </view>\n</view>\n```\n\nIn the relative `Page`, `tapName` should be defined to handle the event, and the parameter of the function is `event`.\n\ncopy\n\n```javascript\nPage({\n  tapName(event) {\n    console.log(event);\n  },\n});\n```\n\nThe console output\n\ncopy\n\n```json\n{\n  \"type\": \"tap\",\n  \"timeStamp\": 1550561469952,\n  \"target\": {\n    \"id\": \"tapTestInner\",\n    \"dataset\": {\n      \"hi\": \"Mini Program\"\n    },\n    \"targetDataset\": {\n      \"hi\": \"Mini Program Inner\"\n    }\n  },\n  \"currentTarget\": {\n    \"id\": \"tapTest\",\n    \"dataset\": {\n      \"hi\": \"Mini Program\"\n    }\n  }\n}\n```\n\nIn the use of components (basic component, extended component and custom component), the events available in the component depends on the support of the component itself. The supported events are specified clearly in the document of the specific component.\n\n## Event Type\n\nThe events fall into bubbling events and non-bubbling events:\n\n1. **Bubbling events**: With `on` as the prefix, when the event of a component is triggered, the event is transferred to parent node.\n\n2. **Non-bubbling events**: With `catch` as the prefix, when the event of a component is triggered, the event is not transferred to parent node.\n\nThe event binding is written is the same as component attribute in form of `key, value`.\n\n- The key starts with `on` or `catch`, followed by event type, such as onTap and catchTap.\n\n- The value is a string corresponding to the name of function defined in the Page. Error is reported when no trigger event exists.\n\ncopy\n\n```html\n<view id=\"outter\" onTap=\"handleTap1\">\n view1\n <view id=\"middle\" catchTap=\"handleTap2\">\n   view2\n   <view id=\"inner\" onTap=\"handleTap3\">\n     view3\n   </view>\n </view>\n</view>\n```\n\nIn the above codes, clicking view3 triggers handleTap3 and handleTap2 (because tap event bubbles to view2m while view2 prevents tap event bubbling and does not transfer to parent node). Clicking view2 triggers handleTap2; clicking view1 triggers handleTap1.\n\n**All bubbling events**:\n\n|     |     |\n| --- | --- |\n| **Type** | **Trigger condition** |\n| touchStart | Start of touch action. |\n| touchMove | Move after touch. |\n| touchEnd | End of touch action. |\n| touchCancel | Touch action interrupted, such as incoming call and pop-up. |\n| tap | Touch and leave immediately. |\n| longTap | Touch and leave after 500ms. |",
  "date": "2022-07-03",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/framework_event-system_event-introduction",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_framework_event-system_event-introduction.json"
}