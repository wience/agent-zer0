{
  "title": "/v1/authorizations/applyToken",
  "content": "# /v1/authorizations/applyToken\n\n2023-01-29 20:55\n\nPOST `/v1/authorizations/applyToken`\n\nThe `applyToken` interface is used to obtain the access token. This interface can be used in the following cases:\n\n- After the merchant receives **authCode** from Mini-Program, the merchant uses this interface to request the access token from e-wallet. In this scenario, the interface generally needs to be used with the Authorization Prepare Interface.\n- When the original token expires, the merchant requests a new access token by using the refresh token. In this scenario, this interface can be used independently.\n\n# Message structure\n\n## Request\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Property** | **Data type** | **Required** | **Description** |\n| referenceClientId | String | No | In Mini-Program scenario, it is the unique identifier of the Mini-Program authorized by the user.<br>The referenceClientId represents the next-level clien id. When multiple auth codes need to be assigned to the same client, different referenceClientIds can be passed in to distinguish them.<br>Max. length: 128 characters. |\n| grantType | String | Yes | Indicates which parameter is to be used to obtain the access token. Possible values are:<br>- **AUTHORIZATION\\_CODE**: the `authCode` is to be used to retrieve the accessToken.<br>- **REFRESH\\_TOKEN**: the refreshToken is to be used to retrieve the accessToken.<br>Max. length: 16 characters. |\n| authCode | String | No | Is required when **grantType** is **AUTHORIZATION\\_CODE**.<br>The authorization code, which is used by confidential and public clients to exchange an authorization code for an access token. After the user returns to the client via the Mini-program API, the Mini-program will get the authorization code from the response of and use it to request an access token.<br>Max. length: 32 characters. |\n| refreshToken | String | No | **refreshToken** is required when **grantType** is **REFRESH\\_TOKEN**.<br>The refresh token, which is used by the auth client to exchange for a new access token when the access token expires. By using the refresh token, new access tokens can be obtained without further interaction with the user.<br>Max. length: 128 characters. |\n| extendInfo | String | No | The extend information,wallet and merchant can put extend info here.<br>Max. length: 4096 characters. |\n\n## Response\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Property** | **Data type** | **Required** | **Description** |\n| result | [**Result**](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/vs3pkf#sHXZc) | Yes | The request result, which contains information related to the request result, such as status and error codes. |\n| accessToken | String | No | An access token that can be used to access the user resource scope.<br>When authorization application is successful **\\[result.resultStatus == S\\]**, the auth client might use accessToken to acccess the corresponding user's resource scope.<br>Max. length: 128 characters. |\n| accessTokenExpiryTime | String/Datetime | No | Access token expiration time, which follows the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard. After this time, authClient will not be able to use this token to deduct from user's account.<br>This parameter must be returned when authorization application is successful **\\[result.resultStatus == S\\]**,  and the accessToken will be invalid after <br>**accessTokenExpiryTime.** |\n| refreshToken | String | No | The refresh token that is used by the auth client to exchange for a new access token when the access token expires. By using the refresh token, new access tokens can be obtained without further interaction with the user.<br>This parameter must be returned when authorization application is successful **\\[result.resultStatus == S\\]**, and the merchant can use the **refreshToken** to request for a new **accessToken**.<br>Max. length: 128 characters. |\n| refreshTokenExpiryTime | String/Datetime | No | Refresh token expiration time, after which the auth client cannot use this token to retrieve a new access token. The value follows the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard.<br>This parameter must be returned when authorization application is successful **\\[result.resultStatus == S\\]**,  and the merchant will not be able to use the refreshToken to retrieve a new **accessToken** after **refreshTokenExpiryTime.** |\n| customerId | String | No | Resource owner id, maybe user id, app id of merchant's application, merchant id.<br>Max. length: 64 characters. |\n| extendInfo | String | No | The extend information,wallet and merchant can put extend info here.<br>Max. length: 4096 characters. |\n\n### Result process logic\n\nFor different request results, different actions are to be performed. See the following list for details:\n\n- If the value of **result.resultStatus** is **S**, the authorization token application request is successful. The merchant can use the access token to access the corresponding user resource scope.\n- If the value of **result.resultStatus** is **F** or **U**, AuthClient may guide user to try again.\n\n### Result\n\n|     |     |     |\n| --- | --- | --- |\n| **resultStatus** | **resultCode** | **resultMessage** |\n| S | SUCCESS | Success. |\n| U | UNKNOWN\\_EXCEPTION | An API calling is failed, which is caused by unknown reasons. |\n| U | REQUEST\\_TRAFFIC\\_EXCEED\\_LIMIT | The request traffic exceeds the limit. |\n| F | PROCESS\\_FAIL | A general business failure occurred. Don't retry. |\n| F | PARAM\\_ILLEGAL | Illegal parameters exist. For example, a non-numeric input, or an invalid date. |\n| F | ACCESS\\_DENIED | The access is denied. |\n| F | INVALID\\_API | The called API is invalid or not active. |\n| F | AUTH\\_CLIENT\\_UNSUPPORTED\\_GRANT\\_TYPE | The auth client do not support this grant type. |\n| F | INVALID\\_AUTH\\_CLIENT | The auth client is invalid. |\n| F | INVALID\\_AUTH\\_CLIENT\\_STATUS | Invalid auth client status. |\n| F | INVALID\\_REFRESH\\_TOKEN | The refresh token is invalid. |\n| F | EXPIRED\\_REFRESH\\_TOKEN | The refresh token is expired. |\n| F | USED\\_REFRESH\\_TOKEN | The refresh token has been used. |\n| F | INVALID\\_CODE | The authorization code is invalid. |\n| F | USED\\_CODE | The authorization code has been used. |\n| F | EXPIRED\\_CODE | The authorization code is expired. |\n| F | REFERENCE\\_CLIENT\\_ID\\_NOT\\_MATCH | The reference client id does not match. |\n| F | EXPIRED\\_AGENT\\_TOKEN | The access token of mini program is expired. |\n| F | INVALID\\_AGENT\\_TOKEN | The access token of mini program is invalid. |\n\n# Sample\n\nThe authorization token application is used to exchange the access token based on the auth code after  obtaining the auth code.\n\n![/v1/authorizations/applyToken](https://ac.alipay.com/storage/2020/5/11/793a3d8d-5270-405b-9362-e6a670b9c842.png)\n\n1. The Mini Program calls my.getAuthCode interface to obtain the authorization code from e-wallet. (Step 1)\n2. E-wallet returns the authorization code to the Mini Program (Step 7)\n3. The Mini Program sends authorization code to the merchant server (Step 8)\n4. The merchant server calls /v1/authorizations/applyTokeninterface to obtain the access token from e-wallet server and e-wallet server returns the access token and customer ID to the merchant server (Step 9 and Step 11).\n\n**Note**: Other steps are covered by e-wallet.\n\n## Request\n\n**A.** **Retrieving** **`accessToken`** **with** **`authCode`**\n\ncopy\n\n```json\n{\n  \"referenceClientId\": \"305XST2CSG0N4P0xxxx\",\n  \"grantType\": \"AUTHORIZATION_CODE\",\n  \"authCode\": \"2810111301lGZcM9CjlF91WH00039190xxxx\",\n  \"extendInfo\": \"{\\\"customerBelongsTo\\\":\\\"siteNameExample\\\"}\"\n}\n```\n\n**B.** **Retrieving** **`accessToken`** **with** **`refreshToken`**\n\ncopy\n\n```json\n{\n  \"grantType\": \"REFRESH_TOKEN\",\n  \"refreshToken\": \"2810111301lGZcM9CjlF91WH00039190xxxx\",\n  \"extendInfo\": \"{\\\"customerBelongsTo\\\":\\\"siteNameExample\\\"}\"\n}\n```\n\n- **authCode** is from the my.getAuthCode JS-API, you can obtain the `authCode` in the success callback. when **grantType == AUTHORIZATION\\_CODE** means that we are requesting for the accessToken by the `authCode` .\n- **refreshToken** is obtained from the response of the previous accessToken Application call. while **grantType == REFRESH\\_TOKEN** means that we are requesting for the accessToken by providing the refreshToken.\n- **extendInfo,** includes key - **customerBelongsTo** the e-wallet that the customer uses. Corresponding to the field 'siteName' that obtained from the API 'my.getSiteInfo', in the Mini Program scenario this is mandatory.\n\n## Response\n\ncopy\n\n```json\n{\n  \"result\": {\n    \"resultCode\": \"SUCCESS\",\n    \"resultStatus\": \"S\",\n    \"resultMessage\": \"success\"\n  },\n  \"accessToken\": \"281010033AB2F588D14B43238637264FCA5AAF35xxxx\",\n  \"accessTokenExpiryTime\": \"2019-06-06T12:12:12+08:00\",\n  \"refreshToken\": \"2810100334F62CBC577F468AAC87CFC6C9107811xxxx\",\n  \"refreshTokenExpiryTime\": \"2019-06-08T12:12:12+08:00\",\n  \"customerId\":\"1000001119398804xxxx\"\n}\n```\n\n- **result.resultStatus==S** shows that the application is successful,\n- AuthClient can make use of **accessToken** to access the user's resource scope before 2019-06-06T12:12:12+08:00 **\\[accessTokenExpiryTime\\].**\n- AuthClient  can make use of **refreshToken** to request for a new accessToken before 2019-06-08T12:12:12+08:00 **\\[refreshTokenExpiryTime\\].**",
  "date": "2023-01-29",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/qfd7r1",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_qfd7r1.json"
}