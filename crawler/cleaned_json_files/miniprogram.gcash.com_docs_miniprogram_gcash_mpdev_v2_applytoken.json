{
  "title": "/v2/authorizations/applyToken",
  "content": "# /v2/authorizations/applyToken\n\n2022-07-05 23:31\n\nPOST `/v2/authorizations/applyToken`\n\nWith this API call, a merchant can obtain an access token from the super app. The merchant is then authorized by users to provide services on the mini program.\n\n> **Note:**\n>\n> - Before calling this API, call the [my.getAuthCode](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_openapi_getauthcode) JSAPI to obtain an authorization code from the super app as the request parameter. Then call this API to exchange for an access token from the super app.\n> - When the original access token expires, use the refresh token to exchange for a new access token directly. In this scenario, this API can be used independently.\n> - An access token should be kept in the merchant server only, which means it should not be returned to the mini program.\n\n# Structure\n\nA message consists of a header and body. The following sections are focused on the body structure. For the header structure, see:\n\n- [Request header](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/openapi_overview#3mLq0)\n- [Response header](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/openapi_overview#YdmVS)\n\n## Request parameters\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| **Field** | **Data type** | **Required** | **Description** | **Example** |\n| appId | String | Yes | Indicates the unique ID assigned by Mini Program Platform to identify a mini program.<br>- Maximum length: 32 characters<br>- Characters not allowed: special characters such as @ # ? <br>**Note**: Obtain this field via the [my.getAppIdSync](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_basic_getappidsync) JSAPI or Mini Program Platform. | \"3333010071465913xxx\" |\n| authClientId | String | Yes | Indicates the unique ID assigned by the super app to identify an authorized merchant.<br>- Maximum length: 128 characters<br>- Characters not allowed:special characters such as @ # ? | \"202016726873874774774xxxx\" |\n| grantType | String | Yes | Indicates the way the authorized merchant obtains an access token. Valid values are: <br>- `AUTHORIZATION_CODE`: Exchange for an access token.<br>- `REFRESH_TOKEN`: Exchange for a new access token when the original one expires. | \"AUTHORIZATION\\_CODE\" |\n| customerBelongsTo | String | No | Indicates the super app that a user uses. Valid values are:<br>- `ALIPAY_CN`: Alipay CN<br>- `ALIPAY_HK`: Alipay HK<br>- `ALIPAY_MO`: Alipay MO<br>- `TNG`: Touch 'n Go<br>- `GCASH`: Gcash<br>- `DANA`: Dana<br>- `KAKAOPAY`: KakaoPay<br>- `BKASH`: bKash<br>- `CHOPE`: Chope<br>- `TRUEMONEY`: TrueMoney | \"TNG\" |\n| authCode | String | No | The authorization code is used to exchange for an access token. Mini programs can obtain an authorization code via the **my.getAuthCode** JSAPI and then send it to the merchant. Then the merchant is authorized to use the authorization code to exchange for an access token. <br>- Maximum length: 64 characters<br>- Characters not allowed: special characters such as @ # ? <br>- Can be `Null`.<br>**Note**: This field is required when the value of _grantType_ is `AUTHORIZATION_CODE`. | \"2810111301lGZcM9CjlF91WH00039190xxxx\" |\n| refreshToken | String | No | The refresh token is used to exchange for a new access token when the original one expires. With the refresh token, a new access token can be obtained without further interaction with the user.<br>- Maximum length: 128 characters<br>- Characters not allowed: special characters such as @ # ? <br>- Can be `Null`.<br>**Note**: This field is required when the value of _grantType_ is `REFRESH_TOKE`. | \"2810111301lGZcM9CjlF91WH00039190xxxx\" |\n| extendInfo | String | No | Indicates the extended information about this API.<br>- Maximum length: 4096 characters<br>- Characters not allowed: special characters such as @ # ? <br>- Can be `Null`. | copy<br>```<br>{<br>    \"memo\": \"memo\"<br>}<br>``` |\n\n## Response parameters\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| **Field** | **Data type** | **Required** | **Description** | **Example** |\n| result | [Result](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/v2_data_dict#sHXZc) | Yes | Indicates the request result such as status and error codes. | copy<br>```<br>{<br>  \"resultCode\": \"SUCCESS\",<br>  \"resultStatus\": \"S\",<br>  \"resultMessage\": \"success\"<br>}<br>``` |\n| accessToken | String | No | The access token is used to access user information. For the specific information that can be accessed, see the [my.getAuthCode](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_openapi_getauthcode) JSAPI. <br>- Maximum length: 128 characters<br>- Characters not allowed: special characters such as @ # ? <br>- Can be `Null`.<br>**Note**: This field must be returned when the authorization request is successful. | \"281010033AB2F588D14B43238637264FCA5AAF35xxxx\" |\n| accessTokenExpiryTime | Datetime | No | Indicates when an access token expires.For example, in the payment scenario, once the access token expires, the authorized merchant cannot use this token to debit the user's account.<br>The value follows the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard format. For example, \"2019-11-27T12:01:01+08:30\". <br>**Note**: This field must be returned when the authorization request is successful. | \"2019-06-06T12:12:12+08:00\" |\n| refreshToken | String | No | The refresh token is used to exchange for a new access token when the original one expires. With the refresh token, a new access token can be obtained without further interaction with the user.<br>- Maximum length: 128 characters<br>- Characters not allowed: special characters such as @ # ? <br>- Can be `Null`.<br>**Note**: This field must be returned when the authorization request is successful. | \"2810100334F62CBC577F468AAC87CFC6C9107811xxxx\" |\n| refreshTokenExpiryTime | Datetime | No | Indicates when the refresh token expires. Once the refresh token expires, the authorized merchant cannot use this token to exchange for a new access token.<br>The value follows the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard format. For example, \"2019-11-27T12:01:01+08:30\". <br>**Note**: This field must be returned when the authorization request is successful. | \"2019-06-08T12:12:12+08:00\" |\n| customerId | String | Yes | Indicates the unique ID assigned by Mini Program Platform to identify a user.<br>- Maximum length: 64 characters<br>- Characters not allowed: special characters such as @ # ? | \"1000001119398804xxxx\" |\n| extendInfo | String | No | Indicates the extended information about this API. <br>- Maximum length: 4096 characters<br>- Characters not allowed: special characters such as @ # ? <br>- Can be `Null`.<br>**Note**: <br>- The _extendInfo.appCustomerId_ assigned by the super app is passed to this field to identify a user.<br>- The _extendInfo.acqCustomerId_ assigned by [Alipay merchant service](https://global.alipay.com/docs/devcenter) is also passed to this field to uniquely identify a user. | See [Response](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/v2_applytoken#2NLzh) sample for details. |\n\n### Result process logic\n\nIn the response, the _result.resultStatus_ field indicates the result of processing a request. The following table describes each result status:\n\n|     |     |\n| --- | --- |\n| **Result status** | **Description** |\n| S | The authorization request is successful. <br>The corresponding _result.resultCode_ is `SUCCESS` and the _result.resultMessage_ is `SUCCESS`. |\n| U | The status of the authorization request is unknown.  <br>The corresponding _result.resultCode_ is `UNKNOWN_EXCEPTION` and _result.resultMessage_ is \"An API calling is failed, which is caused by unknown reasons.\".<br>For details, see the [Common error codes](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/error_codesv2#oyy9K) section. |\n| F | The authorization request is failed. <br>The corresponding _result.resultCode_ and _result.resultMessage_ are various based on different situations. For details, see the following [Error codes](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/v2_applytoken#QiyKe) section. |\n\n# Error codes\n\nError codes are usually classified into the following categories:\n\n- [Common error codes](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/error_codesv2#oyy9K) are common for all mini program OpenAPIs in V2.\n- API-specific error codes are listed in the following table.\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| **Error code** | **Result status** | **Error message** | **Further action** |\n| AUTH\\_CLIENT\\_UNSUPPORTED\\_GRANT\\_TYPE | F | The authorized merchant does not support this grant type. | Use a valid _grantType_ such as `AUTHORIZATION_CODE` or <br>`REFRESH_TOKEN`. |\n| INVALID\\_AUTH\\_CLIENT | F | Either the authorized merchant does not exist or the merchant does not onboard to the native app. | Use a valid _authClientId_ assigned by the super app. |\n| INVALID\\_AUTH\\_CLIENT\\_STATUS | F | The status of the authorized merchant is invalid. | Contact [technical support](https://miniprogram.alipay.com/docs/support/) to troubleshoot the issue. |\n| INVALID\\_REFRESH\\_TOKEN | F | The refresh token does not exist. | Obtain a new refresh token via this API. |\n| EXPIRED\\_REFRESH\\_TOKEN | F | The refresh token expires. | Obtain a new authorization code from the super app via the **my.getAuthCode** JSAPI and then obtain a new refresh token via this API. |\n| USED\\_REFRESH\\_TOKEN | F | The refresh token has been used. | Obtain a new refresh token via this API. |\n| INVALID\\_AUTHCODE | F | The authorization code does not exist. | Obtain a new authorization code from the super app via the **my.getAuthCode** JSAPI. |\n| USED\\_AUTHCODE | F | The authorization code has been used. | Obtain a new authorization code from the super app via the **my.getAuthCode** JSAPI. |\n| EXPIRED\\_AUTHCODE | F | The authorization code expires. | Obtain a new authorization code from the super app via the **my.getAuthCode** JSAPI. |\n\n# Samples\n\nThe data flow to obtain an access token is illustrated as below:\n\n![image](https://ac.alipay.com/storage/2020/5/11/793a3d8d-5270-405b-9362-e6a670b9c842.png)\n\n01. The mini program calls the **my.getAuthCode** JSAPI to request an authorization code from the super app.\n02. The super app processes the request and shows the information that needs to be authorized.\n03. The user confirms the authorization in the super app.\n04. The super app service processes the authorization information to the super app server.\n05. The super app server verifies the authorization information and then generates the authorization code.\n06. The super app server returns the authorization code to the super app service.\n07. The super app service returns the authorization code to the mini program.\n08. The mini program sends the authorization code to the merchant server.\n09. The merchant server calls this API to exchange for an access token from the super app server.\n10. The super app server verifies the authorization code and generates the access token.\n11. The super app returns the access token to the merchant server.\n\n## Request\n\n- Use an authorization code to exchange for an access token\n\ncopy\n\n```json\n{\n  \"appId\":\"3333010071465913xxx\",\n  \"authClientId\": \"202016726873874774774xxxx\",\n  \"grantType\": \"AUTHORIZATION_CODE\",\n  \"authCode\": \"2810111301lGZcM9CjlF91WH00039190xxxx\"\n}\n```\n\nThe mini program ( `3333010071465913xxx`) calls the **my.getAuthCode** JSAPI to obtain the authorization code ( `2810111301lGZcM9CjlF91WH00039190xxxx`) and then send the authorization code to the merchant ( `202016726873874774774xxxx`). The merchant uses the authorization code to exchange for an access token as _grantType_ is `AUTHORIZATION_CODE`.\n\n- Use a refresh token to exchange for an access token\n\ncopy\n\n```json\n{\n  \"grantType\": \"REFRESH_TOKEN\",\n  \"refreshToken\": \"2810111301lGZcM9CjlF91WH00039190xxxx\"\n}\n```\n\nThe value of _grantType_ is `REFRESH_TOKEN`, which means the merchant can obtain an access token by the refresh token ( `2810111301lGZcM9CjlF91WH00039190xxxx`).\n\n## Response\n\ncopy\n\n```json\n{\n    \"result\": {\n        \"resultCode\": \"SUCCESS\",\n        \"resultStatus\": \"S\",\n        \"resultMessage\": \"success\"\n    },\n    \"accessToken\": \"281010033AB2F588D14B43238637264FCA5AAF35xxxx\",\n    \"accessTokenExpiryTime\": \"2019-06-06T12:12:12+08:00\",\n    \"refreshToken\": \"2810100334F62CBC577F468AAC87CFC6C9107811xxxx\",\n    \"refreshTokenExpiryTime\": \"2019-06-08T12:12:12+08:00\",\n    \"customerId\": \"1000001119398804xxxx\",\n    \"extendInfo\": \"{\\\"appCustomerId\\\":\\\"200xxxx\\\",\\\"acqCustomerId\\\":\\\"300xxxx\\\"}\"\n}\n```\n\n- _result.resultStatus_ is `S`, which shows the request to obtain an access token is successful.\n- The authorized merchant can use the access token ( `281010033AB2F588D14B43238637264FCA5AAF35`) before _accessTokenExpiryTime_ ( `2019-06-06T12:12:12+08:00`).\n- `1000001119398804xxxx` is the user who authorizes the merchant.\n- The authorized merchant can use the refresh token ( `2810100334F62CBC577F468AAC87CFC6C9107811`) to exchange for a new access token before _refreshTokenExpiryTime_ ( `2019-06-08T12:12:12+08:0`).\n- _extendInfo_ returns another two IDs to identify the user:\n\n- _appCustomerId_: Indicates the ID assigned by the super app to identify a user.\n- _acqCustomerId_: Indicates the ID assigned by Alipay merchant service to identify a user.\n\n# Related links\n\n[my.getAuthCode](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_openapi_getauthcode)\n\n[my.getAppIdSync](https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/api_basic_getappidsync)",
  "date": "2022-07-05",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/mpdev/v2_applytoken",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_mpdev_v2_applytoken.json"
}