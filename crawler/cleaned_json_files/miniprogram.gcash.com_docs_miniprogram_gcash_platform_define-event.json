{
  "title": "Define an event",
  "content": "# Define an event\n\n2022-07-07 17:08\n\nData is stored and analyzed based on an event, which is triggered by user interaction with a mini program. See [Event management and analysis](https://miniprogram.gcash.com/docs/miniprogram_gcash/platform/manage-event) for more details.\n\n# User experience\n\nFor example, the following figure illustrates the purchase process of an e-commerce mini program user:\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/5956329/1616058386192-a807f8da-ee60-4958-a2dd-2b8823b30e1f.png#align=left&display=inline&height=682&margin=%5Bobject%20Object%5D&name=image.png&originHeight=682&originWidth=1782&size=332027&status=done&style=stroke&width=1782)\n\nBased on the user journey above, you can define the following events:\n\n- View the home page\n- View product details\n- Add the product to shopping cart\n- Submit an order\n- Pay\n\n# Procedures\n\nThis section describes in detail how to define an event in four major steps:\n\n1\\. Create an event\n\n2\\. Enter the event name\n\n3\\. Choose the data reporting method\n\n4\\. Save the event\n\nThe \"submit an order\" and \"view the home page\" events mentioned above will serve as examples to illustrate the procedures.\n\n## 1\\. Create an event\n\n1. Go to **Analytics** \\> **Performance** \\> **My Analysis**;\n2. Choose the mini program that you want to perform data analysis on;\n3. Click **Manage Event**;\n4. Click **\\+** **New Event** on the **Manage Event** page.\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/5956329/1614220573620-f739ce67-6fb3-46a5-a557-95608efc2778.png#align=left&display=inline&height=190&margin=%5Bobject%20Object%5D&name=image.png&originHeight=379&originWidth=1764&size=44398&status=done&style=stroke&width=882)\n\n## 2\\. Enter the event name\n\nEnter an event name that complies with the naming rules. For example, `submitOrder` will be a suitable name for the \"submit an order\" event.\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/5956329/1615515764185-197a662d-7975-4f3b-818c-fb98622e32aa.png#align=left&display=inline&height=167&margin=%5Bobject%20Object%5D&name=image.png&originHeight=167&originWidth=732&size=8569&status=done&style=stroke&width=732)\n\n## 3\\. Choose the data reporting method\n\nData reporting methods define how data are to be analyzed. For example, with the Data Reporting by Self-Defined Actions method, you can define actions with different parameters to collect and report data automatically. For more information, see [Data Reporting by Self-Defined Actions](https://miniprogram.gcash.com/docs/miniprogram_gcash/platform/fillinconfiguration).\n\nYou need to define an action and assign the following parameters:\n\n- Trigger\n- Report Type\n- Page\n- Element\n- Field Name\n- Field Value\n- Field Type\n- Note\n\n### Trigger\n\nTrigger conditions. For example, `click` indicates that the event is triggered by clicking. For more information, see [Trigger Conditions](https://miniprogram.gcash.com/docs/miniprogram_gcash/platform/fillinconfiguration#LHsGz);\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/5956329/1615446432262-48f282e4-3e25-4f62-861c-9d62c7c7149a.png#align=left&display=inline&height=368&margin=%5Bobject%20Object%5D&name=image.png&originHeight=368&originWidth=958&size=29029&status=done&style=stroke&width=958)\n\n### Report Type\n\nThe action occurs when the event is triggered. You can choose either of the following two types:\n\n- Collect and report once: data collected on a user's single action.\n- Collect multiple times and report once: data collected on a user's multiple actions.\n\n#### Collect and Report Once\n\nIf you choose this report type, data are reported with one action. Take \"submit an order\" event as an example:\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/5956329/1615448437129-2e612070-820f-42f0-858a-e87ad224056b.png#align=left&display=inline&height=847&margin=%5Bobject%20Object%5D&name=image.png&originHeight=847&originWidth=890&size=51447&status=done&style=stroke&width=890)\n\nYou also need to configure the **Action** with the following parameters:\n\n- **Page**: This triggers a page, so you would need to enter the page path. You can find the page path via app.json files in the mini program source code of IDE (Mini Program Studio). For this action, `pages/shopping-cart/shopping-cart` is appropriate.\n\n\ncopy\n\n```jsx\napp.json:\n{\n  \"pages\": [\\\n    \"pages/handbag/handbag\",\\\n    \"pages/shopping-cart/shopping-cart\",\\\n    \"pages/confirm-order/confirm-order\",\\\n    \"pages/my-order/my-order\"\\\n  ]\n}\n```\n\n- **Element**: Enter a class or ID, which must begin with \" `.`\" or \" `#`\" respectively. You can find the element via app.json files in mini program source code of IDE (Mini Program Studio). For this action, developers have defined `.cart-footer_action` as the class for submitting an order.\n\nNote: **Page** and **Element** may be optional for other trigger conditions.\n\ncopy\n\n```jsx\npages/shopping-cart/shopping-cart.axml:\n<view class=\"cart-footer\">\n    <view class=\"cart-footer__desc\">\n      <view class=\"cart-footer__price-section\">\n        <view class=\"cart-footer__total-desc\">Total：</view>\n        <view class=\"cart-footer__total-price\">¥{{submitAmount}}</view>\n      </view>\n      <view class=\"cart-footer__discount\">\n        Total reduce ¥{{totalDiscount}}（store reduce {{shopDiscount}}）\n      </view>\n    </view>\n    <view class=\"cart-footer__action\" onTap=\"onSubmit\">\n      submit ({{count}})\n    </view>\n</view>\n```\n\n- **Field Name**: Fields are the metrics you would like to analyze. You can define a name and assign attributes to this metric via the **Field Value** and **Field Type**.\n- **Field Value**: Enter a variable for the field. For this example, developers have defined `submitAmount` as the field to calculate the total price for the submitted orders. For **Field Value**, you need to enter the variable that is defined by developers in IDE.\n\ncopy\n\n```jsx\npages/shopping-cart/shopping-cart.js:\nPage({\n  data: {\n    count: 0,\n    totalDiscount: 0,\n    shopDiscount: 50,\n    time: new Date,\n    state: '',\n    submitAmount: 0,\n    total: 0,\n    commodity: [],\n    allChecked : true,\n    selectedCommoditys : []\n  },\n  onLoad() {\n    my.setNavigationBar({\n      title: 'Shopping Cart',\n    });\n  },\n  onShow() {\n    let conmondityNum = 0;\n    let sumAmount = 0;\n    let shoppingCartInfo = getShoppingCartInfo();\n    let totalDiscount = 0;\n    let commodity = [];\n    if(shoppingCartInfo.length != 0){\n       shoppingCartInfo.forEach(element => {\n        conmondityNum += element.purchaseNum;\n        sumAmount += (element.commodity.price * element.purchaseNum);\n        let targetCommodity = {title: element.commodity.title,\n                              description:element.commodity.type,\n                              price:element.commodity.price,\n                              num:element.purchaseNum,\n                              id:element.commodity.id,\n                              image:element.commodity.cover,\n                              checked:true};\n        commodity[commodity.length] = targetCommodity;\n      });\n      totalDiscount=conmondityNum-1;\n    }\n    this.setData({\n           count: conmondityNum,\n           totalDiscount: totalDiscount,\n           shopDiscount: 50,\n           time: new Date,\n           state: '',\n           submitAmount: sumAmount,\n           total: 0,\n           commodity: commodity,\n           selectedCommoditys : []\n         });\n  },\n  onSubmit(){\n    if(this.data.count == 0){\n        alert(\"The shopping cart is empty\");\n    }\n    this.fetchCheckedConmodity();\n    addOrderData(this.data.selectedCommoditys);\n    my.navigateTo({\n      url: '/pages/confirm-order/confirm-order',\n    })\n  },\n  onChange(e) {\n    let checkedValues = e.detail.value;\n    if(checkedValues.length != 0){\n       checkedValues.forEach(checkedValue =>{\n          fetchSingleCommodity();\n       });\n    }\n\n  },\n  fetchSingleCommodity(id){\n      this.data.commodity.forEach(item =>{\n        if(item.id === id){\n           this.data.selectedCommoditys[this.data.selectedCommoditys.length] = item;\n        }\n      });\n  },\n  fetchCheckedConmodity(){\n    this.data.commodity.forEach(item =>{\n        if(item.checked === true){\n           this.data.selectedCommoditys[this.data.selectedCommoditys.length] = item;\n        }\n      });\n  },\n  goToStoreGoods(){\n    my.switchTab({\n        url: 'pages/handbag/handbag'\n      })\n  }\n});\n\n```\n\n- **Field Type:**\n\n- **Int** (integer) is suitable for calculating amounts, where you can further define its maximum, minimum, count, sum, and average. For example, you can view data on the minimum total price for the `submitAmount` field when analyzing this event.\n- **String** is suitable for calculating the count of each occurrence. For example, you can view data on the number of order IDs under this event. **Int** type would not be suitable here as each order ID does not have a maximum, minimum, sum, or average amount.\n\n- **Note**: You can describe fields in detail.\n\n#### Collect Multiple Times and Report Once\n\nIf you choose this report type, which consists of multiple actions, you can see the following fields:\n\n- `Start`: start to collect data\n- `Report`: report the collected data\n\nThe last action must be to report data.\n\nTake the \"visit the home page\" as an example. Data collection and reporting of the `homePageUserBehavior` event includes two actions: enter the **Home** page and click the **Popularity List** tab.\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/5956329/1615454661169-be5732fa-b549-422f-8fa0-38a383cdf13e.png#align=left&display=inline&height=535&margin=%5Bobject%20Object%5D&name=image.png&originHeight=535&originWidth=846&size=33606&status=done&style=stroke&width=846)\n\nYou need to configure the **Action1** with the following parameters:\n\n- **Page**: This triggers a page, so you would need to enter the page path. You can find the page pathvia app.json files in mini program source code of IDE (Mini Program Studio). For this action, `pages/handbag/handbag` is appropriate.\n\ncopy\n\n```jsx\napp.json:\n{\n  \"pages\": [\\\n    \"pages/handbag/handbag\",\\\n    \"pages/shopping-cart/shopping-cart\",\\\n    \"pages/confirm-order/confirm-order\",\\\n    \"pages/my-order/my-order\",\\\n  ]\n}\n```\n\n- **Field Name**: Fields are the metrics you would like to analyze. You can define a name and assign attributes to this metric via the **Field Value** and **Field Type**.\n- **Field Value**: Enter a variable for the field. For this example, developers have defined `activeTabName` as the field to calculate the count of home page visits.\n\ncopy\n\n```jsx\npages/handbag/handbag.js:\nPage({\n  data: {\n    activeTabName : \"All\"\n  },\n  onShow() {\n    const { searchValue = '' } = getApp();\n    this.setData({ searchValue });\n    this.fetchCurrentCommodities(this.data.activeTabId);\n  },\n  onActiveTabChange(id) {\n    this.setData({ activeTabId: id,activeTabName:this.data.tabs[id -1].name });\n    this.fetchCurrentCommodities(id);\n  }\n});\n```\n\n- **Field Type:**\n\n- **Int** (integer) is suitable for calculating amounts, where you can further define its maximum, minimum, count, sum, and average. For example, you can view data on the minimum total price for submitted orders when analyzing an event.\n- **String** is suitable for calculating the count of each occurrence. For example, you can view data on the number of home page visits. **Int** type would not be suitable here as each home page visit does not have a maximum, minimum, sum, or average amount.\n\n- **Note**: You can describe fields in detail.\n\n![image.png](https://yuque.antfin.com/images/lark/0/2021/png/5956329/1615454687643-bb51a2c9-1566-4631-9a74-a779b5e292ee.png#align=left&display=inline&height=623&margin=%5Bobject%20Object%5D&name=image.png&originHeight=623&originWidth=829&size=34725&status=done&style=stroke&width=829)\n\nYou need to configure the **Action 2** with the following parameters:\n\n- **Page**: This triggers a page, so you would need to enter the page path. You can find the page pathvia app.json files in mini program source code of IDE (Mini Program Studio). As **Action 2** occurs on the same page as **Action 1**, pages/handbag/handbag entered here as well.\n\ncopy\n\n```jsx\napp.json:\n{\n  \"pages\": [\\\n    \"pages/handbag/handbag\",\\\n    \"pages/shopping-cart/shopping-cart\",\\\n    \"pages/my/my\",\\\n    \"pages/my-order/my-order\",\\\n    \"pages/confirm-order/confirm-order\"\\\n  ]\n}\n```\n\n- **Element**: Enter a class or ID, which must begin with \" `.`\" or \" `#`\" respectively. You can find the element via app.json files in mini program source code of IDE (Mini Program Studio). For this action, enter `#TREND`, which is defined as the ID for the **Popularity List** tab.\n\ncopy\n\n```jsx\npages/handbag/handbag.axml:\n<view\n    a:for=\"{{tabs}}\"\n    class=\"tab-item {{activeId===item.id?'tab-item--active':''}}\"\n    onTap=\"onActiveTabChange\"\n    data-index=\"{{item.id}}\"\n    id=\"TREND\">\n    {{item.title}}\n    <image\n      a:if=\"{{item.sortable}}\"\n      src=\"https://gw.alipayobjects.com/mdn/rms_107da2/afts/img/A*WR7tS62_iPwAAAAAAAAAAABkARQnAQ\"\n      mode=\"scaleToFill\"\n    />\n</view>\n\n```\n\n- **Field Name**: Fields are the metrics you would like to analyze. You can define a name and assign attributes to this metric via the **Field Value** and **Field Type**.\n- **Field Value**: Enter a variable for the field. For this example, developers have defined `activeTabName` as the field to calculate the count of **Popularity List** tab clicks.\n\ncopy\n\n```jsx\npages/handbag/handbag.js:\nPage({\n  data: {\n    activeTabName : \"All\"\n  },\n  onShow() {\n    const { searchValue = '' } = getApp();\n    this.setData({ searchValue });\n    this.fetchCurrentCommodities(this.data.activeTabId);\n  },\n  onActiveTabChange(id) {\n    this.setData({ activeTabId: id,activeTabName:this.data.tabs[id -1].name });\n    this.fetchCurrentCommodities(id);\n  }\n});\n```\n\n- **Field Type:**\n\n- **Int** (integer) is suitable for calculating amounts, where you can further define its maximum, minimum, count, sum, and average. For example, you can view data on the minimum total price for submitted orders when analyzing an event.\n- **String** is suitable for calculating the count of each occurrence. For example, you can view data on the number of tab visits. **Int** type would not be suitable here as each tab visit does not have a maximum, minimum, sum, or average amount.\n\n- **Note**: You can describe fields in detail.\n\n## 4\\. Save the event\n\nConfirm all the fields and click **Save** to complete defining an event.\n\n# Next steps\n\n[Publish an event](https://miniprogram.gcash.com/docs/miniprogram_gcash/platform/publish-event)\n\n[Analyze events and funnels](https://miniprogram.gcash.com/docs/miniprogram_gcash/platform/analyze-data)",
  "date": "2022-07-07",
  "source": "https://miniprogram.gcash.com/docs/miniprogram_gcash/platform/define-event",
  "path": "miniprogram_gcash",
  "type": "miniprogram",
  "filename": "miniprogram.gcash.com_docs_miniprogram_gcash_platform_define-event.json"
}